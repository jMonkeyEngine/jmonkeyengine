/*
 * Copyright (c) 2009-2014 jMonkeyEngine
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * Neither the name of 'jMonkeyEngine' nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.jme3.renderer.opengl;

import com.jme3.util.IntMap;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.util.HashMap;

/**
 * Utility class that allows tracing of OpenGL calls generated by the engine.
 * 
 * @author Kirill Vainer
 */
public final class GLTracer implements InvocationHandler {
    
    private final Object obj;
    private final IntMap<String> constMap;
    private static final HashMap<String, IntMap<Void>> nonEnumArgMap = new HashMap<String, IntMap<Void>>();
    
    private static void noEnumArgs(String method, int... argSlots) {
        IntMap<Void> argSlotsMap = new IntMap<Void>();
        for (int argSlot : argSlots) {
            argSlotsMap.put(argSlot, (Void) null);
        }
        nonEnumArgMap.put(method, argSlotsMap);
    }
    
    static {
        noEnumArgs("glViewport", 0, 1, 2, 3);
        noEnumArgs("glScissor", 0, 1, 2, 3);
        noEnumArgs("glClear", 0);
        noEnumArgs("glGetInteger", 1);
        noEnumArgs("glGetString", 1);
        
        noEnumArgs("glBindTexture", 1);
        noEnumArgs("glPixelStorei", 1);
//        noEnumArgs("glTexParameteri", 2);
        noEnumArgs("glTexImage2D", 1, 3, 4, 5);
        noEnumArgs("glTexImage3D", 1, 3, 4, 5, 6);
        noEnumArgs("glTexSubImage2D", 1, 2, 3, 4, 5);
        noEnumArgs("glTexSubImage3D", 1, 2, 3, 4, 5, 6, 7);
        noEnumArgs("glCompressedTexImage2D", 1, 3, 4, 5);
        noEnumArgs("glCompressedTexSubImage3D", 1, 2, 3, 4, 5, 6, 7);
        noEnumArgs("glDeleteTextures", 0);
        noEnumArgs("glReadPixels", 0, 1, 2, 3);
        
        noEnumArgs("glBindBuffer", 1);
        noEnumArgs("glEnableVertexAttribArray", 0);
        noEnumArgs("glDisableVertexAttribArray", 0);
        noEnumArgs("glVertexAttribPointer", 0, 1, 4, 5);
        noEnumArgs("glDrawRangeElements", 1, 2, 3, 5);
        noEnumArgs("glDrawArrays", 1, 2);
        noEnumArgs("glDeleteBuffers", 0);
        noEnumArgs("glBindVertexArray", 0);
        noEnumArgs("glGenVertexArrays", 0);
        
        noEnumArgs("glBindFramebufferEXT", 1);
        noEnumArgs("glBindRenderbufferEXT", 1);
        noEnumArgs("glRenderbufferStorageEXT", 2, 3);
        noEnumArgs("glRenderbufferStorageMultisampleEXT", 1, 3, 4);
        noEnumArgs("glFramebufferRenderbufferEXT", 3);
        noEnumArgs("glFramebufferTexture2DEXT", 3, 4);
        noEnumArgs("glBlitFramebufferEXT", 0, 1, 2, 3, 4, 5, 6, 7, 8);
        
        noEnumArgs("glCreateProgram", -1);
        noEnumArgs("glCreateShader", -1);
        noEnumArgs("glShaderSource", 0);
        noEnumArgs("glCompileShader", 0);
        noEnumArgs("glGetShader", 0);
        noEnumArgs("glAttachShader", 0, 1);
        noEnumArgs("glLinkProgram", 0);
        noEnumArgs("glGetProgram", 0);
        noEnumArgs("glUseProgram", 0);
        noEnumArgs("glGetUniformLocation", 0, -1);
        noEnumArgs("glUniformMatrix3", 0);
        noEnumArgs("glUniformMatrix4", 0);
        noEnumArgs("glUniform1i", 0, 1);
        noEnumArgs("glUniform1f", 0);
        noEnumArgs("glUniform2f", 0);
        noEnumArgs("glUniform3f", 0);
        noEnumArgs("glUniform4", 0);
        noEnumArgs("glUniform4f", 0);
        noEnumArgs("glGetAttribLocation", 0, -1);
        noEnumArgs("glDetachShader", 0, 1);
        noEnumArgs("glDeleteShader", 0);
        noEnumArgs("glDeleteProgram", 0);
        noEnumArgs("glBindFragDataLocation", 0, 1);
    }
    
    public GLTracer(Object obj, IntMap<String> constMap) {
        this.obj = obj;
        this.constMap = constMap;
    }
    
    private static IntMap<String> generateConstantMap(Class<?> ... classes) {
        IntMap<String> constMap = new IntMap<String>();
        for (Class<?> clazz : classes) {
            for (Field field : clazz.getFields()) {
                if (field.getType() == int.class) {
                    try {
                        int val = field.getInt(null);
                        String name = field.getName();
                        constMap.put(val, name);
                    } catch (IllegalArgumentException ex) {
                    } catch (IllegalAccessException ex) {
                    }
                }
            }
        }
        // GL_ONE is more common than GL_TRUE (which is a boolean anyway..)
        constMap.put(1, "GL_ONE");
        return constMap;
    }
    
    /**
     * Creates a tracer implementation that wraps OpenGL ES 2.
     * 
     * @param glInterface OGL object to wrap
     * @param glInterfaceClass The interface to implement
     * @return A tracer that implements the given interface
     */
    public static Object createGlesTracer(Object glInterface, Class<?> glInterfaceClass) {
        IntMap<String> constMap = generateConstantMap(GL.class, GLFbo.class, GLExt.class);
        return Proxy.newProxyInstance(glInterface.getClass().getClassLoader(),
                                      new Class<?>[] { glInterfaceClass }, 
                                      new GLTracer(glInterface, constMap));
    }

    /**
     * Creates a tracer implementation that wraps OpenGL 2+.
     * 
     * @param glInterface OGL object to wrap
     * @param glInterfaceClasses The interface(s) to implement
     * @return A tracer that implements the given interface
     */
    public static Object createDesktopGlTracer(Object glInterface, Class<?> ... glInterfaceClasses) {
        IntMap<String> constMap = generateConstantMap(GL2.class, GL3.class, GL4.class, GLFbo.class, GLExt.class);
        return Proxy.newProxyInstance(glInterface.getClass().getClassLoader(),
                                      glInterfaceClasses, 
                                      new GLTracer(glInterface, constMap));
    }
    
    private String translateInteger(String method, int value, int argIndex) {
        IntMap<Void> argSlotMap = nonEnumArgMap.get(method);
        if (argSlotMap != null && argSlotMap.containsKey(argIndex)) {
            return Integer.toString(value);
        }
        String enumName = constMap.get(value);
        if (enumName != null) {
            return enumName;
        } else {
            return "GL_ENUM_" + Integer.toHexString(value);
            //throw new IllegalStateException("Untranslatable enum encountered on " + method + 
            //                                " at argument " + argIndex + " with value " + value);
        }
    }
    
    private String translateString(String value) {
        return "\"" + value.replaceAll("\0", "\\\\0") + "\"";
    }
    
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        Object result = method.invoke(obj, args);
        String methodName = method.getName();
        if (methodName.startsWith("gl")) {
            System.out.print(methodName);
            System.out.print("(");
            if (args != null) {
                Class<?>[] paramTypes = method.getParameterTypes();
                for (int i = 0; i < args.length; i++) {
                    if (paramTypes[i] == int.class) {
                        int val = (Integer)args[i];
                        System.out.print(translateInteger(methodName, val, i));
                    } else if (paramTypes[i] == String.class) {
                        System.out.print(translateString((String)args[i]));
                    } else if (paramTypes[i] == String[].class) {
                        String[] arr = (String[]) args[i];
                        if (arr.length == 1) {
                            if (arr[0].length() > 150) {
                                System.out.print("\"" + arr[0].substring(0, 150) + "...\"");
                            } else {
                                System.out.print("\"" + arr[0] + "\"");
                            }
                        } else {
                            System.out.print("String[" + arr.length + "]");
                        }
                    } else if (args[i] instanceof IntBuffer) {
                        IntBuffer buf = (IntBuffer) args[i];
                        if (buf.capacity() == 16) {
                            int val = buf.get(0);
                            System.out.print("out=" + translateInteger(methodName, val, i));
                        } else if (buf.capacity() == 1) {
                            System.out.print("out=" + buf.get(0));
                        } else {
                            System.out.print(args[i]);
                        }
                    } else if (args[i] instanceof ByteBuffer) {
                        ByteBuffer bb = (ByteBuffer)args[i];
                        if (bb.capacity() == 250) {
                            if (bb.get(0) != 0) {
                                System.out.print("out=GL_TRUE");
                            } else {
                                System.out.print("out=GL_FALSE");
                            }
                        } else {
                            System.out.print(args[i]);
                        }
                    } else {
                        System.out.print(args[i]);
                    }

                    if (i != args.length - 1) {
                        System.out.print(", ");
                    }
                }
            }

            System.out.print(")");

            if (method.getReturnType() != void.class) {
                if (result instanceof String) {
                    System.out.println(" = " + translateString((String)result));
                } else if (method.getReturnType() == int.class) {
                    int val = (Integer)result;
                    System.out.println(" = " + translateInteger(methodName, val, -1));
                } else if (method.getReturnType() == boolean.class) {
                    boolean val = (Boolean)result;
                    if (val) System.out.println(" = GL_TRUE");
                    else System.out.println(" = GL_FALSE");
                } else {
                    System.out.println(" = ???");
                }
            } else {
                System.out.println();
            }
        }
        return result;
    }
}
