package com.jme3.system.jopenvr;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : headers\openvr_capi.h:1670</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class COpenVRContext extends Structure {
	/**
	 * class vr::IVRSystem *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRSystem;
	/**
	 * class vr::IVRChaperone *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRChaperone;
	/**
	 * class vr::IVRChaperoneSetup *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRChaperoneSetup;
	/**
	 * class vr::IVRCompositor *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRCompositor;
	/**
	 * class vr::IVROverlay *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVROverlay;
	/**
	 * class vr::IVRResources *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRResources;
	/**
	 * class vr::IVRRenderModels *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRRenderModels;
	/**
	 * class vr::IVRExtendedDisplay *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRExtendedDisplay;
	/**
	 * class vr::IVRSettings *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRSettings;
	/**
	 * class vr::IVRApplications *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRApplications;
	/**
	 * class vr::IVRTrackedCamera *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRTrackedCamera;
	/**
	 * class vr::IVRScreenshots *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRScreenshots;
	/**
	 * class vr::IVRDriverManager *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRDriverManager;
	/**
	 * class vr::IVRInput *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRInput;
	/**
	 * class vr::IVRIOBuffer *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRIOBuffer;
	/**
	 * class vr::IVRSpatialAnchors *<br>
	 * C type : intptr_t
	 */
	public IntByReference m_pVRSpatialAnchors;
	public COpenVRContext() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("m_pVRSystem", "m_pVRChaperone", "m_pVRChaperoneSetup", "m_pVRCompositor", "m_pVROverlay", "m_pVRResources", "m_pVRRenderModels", "m_pVRExtendedDisplay", "m_pVRSettings", "m_pVRApplications", "m_pVRTrackedCamera", "m_pVRScreenshots", "m_pVRDriverManager", "m_pVRInput", "m_pVRIOBuffer", "m_pVRSpatialAnchors");
	}
	public COpenVRContext(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends COpenVRContext implements Structure.ByReference {
		
	};
	public static class ByValue extends COpenVRContext implements Structure.ByValue {
		
	};
}
