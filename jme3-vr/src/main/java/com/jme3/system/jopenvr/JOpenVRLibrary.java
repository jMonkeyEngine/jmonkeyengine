package com.jme3.system.jopenvr;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;

import java.nio.IntBuffer;
import java.util.logging.Logger;
/**
 * JNA Wrapper for library <b>JOpenVR</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class JOpenVRLibrary implements Library {
	private static final Logger logger = Logger.getLogger(JOpenVRLibrary.class.getName());
	
	private static String JNA_LIBRARY_NAME;
	private static NativeLibrary JNA_NATIVE_LIB;
	
	/**
	 * The system property that specifies an implementation of OpenVR (openvr_api file) to use. 
	 * This property has to be set at the program launch using <code>-D</code> connector. 
	 * If this property is not set, the embedded library is loaded.
	 */
	public static final String JNA_OPENVR_LIBRARY_PATH = "openvr.library.path";
	
	/**
	 * Init the native binding to the underlying system library.
	 */
	public static void init() throws UnsatisfiedLinkError {
        Native.unregister(JOpenVRLibrary.class);
		
		String path = System.getProperty(JNA_OPENVR_LIBRARY_PATH);
		if (path != null){
			
		  JNA_LIBRARY_NAME      = path;
			
		  logger.config("Using OpenVR implementation located at "+JNA_LIBRARY_NAME);
		  
		  JNA_NATIVE_LIB = NativeLibrary.getInstance(JOpenVRLibrary.JNA_LIBRARY_NAME);
		  Native.register(JOpenVRLibrary.class, JOpenVRLibrary.JNA_NATIVE_LIB);
		} else {
		  
		  JNA_LIBRARY_NAME      = "openvr_api";
		  
		  logger.config("Using embedded OpenVR implementation "+JOpenVRLibrary.JNA_LIBRARY_NAME);
		  
		  JNA_NATIVE_LIB = NativeLibrary.getInstance(JOpenVRLibrary.JNA_LIBRARY_NAME);
		  Native.register(JOpenVRLibrary.class, JOpenVRLibrary.JNA_NATIVE_LIB);
		}
	}
	
	/**
	 * Get the name of the underlying system library.
	 * @return the name of the underlying system library.
	 */
	public static String getSystemLibraryName(){
		return ""+JNA_LIBRARY_NAME;
	}

	
	/**
	 * <i>native declaration : headers\openvr_capi.h:229</i><br>
	 * enum values
	 */
	public static interface EVREye {
		/** <i>native declaration : headers\openvr_capi.h:227</i> */
		public static final int EVREye_Eye_Left = 0;
		/** <i>native declaration : headers\openvr_capi.h:228</i> */
		public static final int EVREye_Eye_Right = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:239</i><br>
	 * enum values
	 */
	public static interface ETextureType {
		/** <i>native declaration : headers\openvr_capi.h:231</i> */
		public static final int ETextureType_TextureType_Invalid = -1;
		/** <i>native declaration : headers\openvr_capi.h:232</i> */
		public static final int ETextureType_TextureType_DirectX = 0;
		/** <i>native declaration : headers\openvr_capi.h:233</i> */
		public static final int ETextureType_TextureType_OpenGL = 1;
		/** <i>native declaration : headers\openvr_capi.h:234</i> */
		public static final int ETextureType_TextureType_Vulkan = 2;
		/** <i>native declaration : headers\openvr_capi.h:235</i> */
		public static final int ETextureType_TextureType_IOSurface = 3;
		/** <i>native declaration : headers\openvr_capi.h:236</i> */
		public static final int ETextureType_TextureType_DirectX12 = 4;
		/** <i>native declaration : headers\openvr_capi.h:237</i> */
		public static final int ETextureType_TextureType_DXGISharedHandle = 5;
		/** <i>native declaration : headers\openvr_capi.h:238</i> */
		public static final int ETextureType_TextureType_Metal = 6;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:244</i><br>
	 * enum values
	 */
	public static interface EColorSpace {
		/** <i>native declaration : headers\openvr_capi.h:241</i> */
		public static final int EColorSpace_ColorSpace_Auto = 0;
		/** <i>native declaration : headers\openvr_capi.h:242</i> */
		public static final int EColorSpace_ColorSpace_Gamma = 1;
		/** <i>native declaration : headers\openvr_capi.h:243</i> */
		public static final int EColorSpace_ColorSpace_Linear = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:251</i><br>
	 * enum values
	 */
	public static interface ETrackingResult {
		/** <i>native declaration : headers\openvr_capi.h:246</i> */
		public static final int ETrackingResult_TrackingResult_Uninitialized = 1;
		/** <i>native declaration : headers\openvr_capi.h:247</i> */
		public static final int ETrackingResult_TrackingResult_Calibrating_InProgress = 100;
		/** <i>native declaration : headers\openvr_capi.h:248</i> */
		public static final int ETrackingResult_TrackingResult_Calibrating_OutOfRange = 101;
		/** <i>native declaration : headers\openvr_capi.h:249</i> */
		public static final int ETrackingResult_TrackingResult_Running_OK = 200;
		/** <i>native declaration : headers\openvr_capi.h:250</i> */
		public static final int ETrackingResult_TrackingResult_Running_OutOfRange = 201;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:260</i><br>
	 * enum values
	 */
	public static interface ETrackedDeviceClass {
		/** <i>native declaration : headers\openvr_capi.h:253</i> */
		public static final int ETrackedDeviceClass_TrackedDeviceClass_Invalid = 0;
		/** <i>native declaration : headers\openvr_capi.h:254</i> */
		public static final int ETrackedDeviceClass_TrackedDeviceClass_HMD = 1;
		/** <i>native declaration : headers\openvr_capi.h:255</i> */
		public static final int ETrackedDeviceClass_TrackedDeviceClass_Controller = 2;
		/** <i>native declaration : headers\openvr_capi.h:256</i> */
		public static final int ETrackedDeviceClass_TrackedDeviceClass_GenericTracker = 3;
		/** <i>native declaration : headers\openvr_capi.h:257</i> */
		public static final int ETrackedDeviceClass_TrackedDeviceClass_TrackingReference = 4;
		/** <i>native declaration : headers\openvr_capi.h:258</i> */
		public static final int ETrackedDeviceClass_TrackedDeviceClass_DisplayRedirect = 5;
		/** <i>native declaration : headers\openvr_capi.h:259</i> */
		public static final int ETrackedDeviceClass_TrackedDeviceClass_Max = 6;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:267</i><br>
	 * enum values
	 */
	public static interface ETrackedControllerRole {
		/** <i>native declaration : headers\openvr_capi.h:262</i> */
		public static final int ETrackedControllerRole_TrackedControllerRole_Invalid = 0;
		/** <i>native declaration : headers\openvr_capi.h:263</i> */
		public static final int ETrackedControllerRole_TrackedControllerRole_LeftHand = 1;
		/** <i>native declaration : headers\openvr_capi.h:264</i> */
		public static final int ETrackedControllerRole_TrackedControllerRole_RightHand = 2;
		/** <i>native declaration : headers\openvr_capi.h:265</i> */
		public static final int ETrackedControllerRole_TrackedControllerRole_OptOut = 3;
		/** <i>native declaration : headers\openvr_capi.h:266</i> */
		public static final int ETrackedControllerRole_TrackedControllerRole_Max = 4;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:272</i><br>
	 * enum values
	 */
	public static interface ETrackingUniverseOrigin {
		/** <i>native declaration : headers\openvr_capi.h:269</i> */
		public static final int ETrackingUniverseOrigin_TrackingUniverseSeated = 0;
		/** <i>native declaration : headers\openvr_capi.h:270</i> */
		public static final int ETrackingUniverseOrigin_TrackingUniverseStanding = 1;
		/** <i>native declaration : headers\openvr_capi.h:271</i> */
		public static final int ETrackingUniverseOrigin_TrackingUniverseRawAndUncalibrated = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:432</i><br>
	 * enum values
	 */
	public static interface ETrackedDeviceProperty {
		/** <i>native declaration : headers\openvr_capi.h:274</i> */
		public static final int ETrackedDeviceProperty_Prop_Invalid = 0;
		/** <i>native declaration : headers\openvr_capi.h:275</i> */
		public static final int ETrackedDeviceProperty_Prop_TrackingSystemName_String = 1000;
		/** <i>native declaration : headers\openvr_capi.h:276</i> */
		public static final int ETrackedDeviceProperty_Prop_ModelNumber_String = 1001;
		/** <i>native declaration : headers\openvr_capi.h:277</i> */
		public static final int ETrackedDeviceProperty_Prop_SerialNumber_String = 1002;
		/** <i>native declaration : headers\openvr_capi.h:278</i> */
		public static final int ETrackedDeviceProperty_Prop_RenderModelName_String = 1003;
		/** <i>native declaration : headers\openvr_capi.h:279</i> */
		public static final int ETrackedDeviceProperty_Prop_WillDriftInYaw_Bool = 1004;
		/** <i>native declaration : headers\openvr_capi.h:280</i> */
		public static final int ETrackedDeviceProperty_Prop_ManufacturerName_String = 1005;
		/** <i>native declaration : headers\openvr_capi.h:281</i> */
		public static final int ETrackedDeviceProperty_Prop_TrackingFirmwareVersion_String = 1006;
		/** <i>native declaration : headers\openvr_capi.h:282</i> */
		public static final int ETrackedDeviceProperty_Prop_HardwareRevision_String = 1007;
		/** <i>native declaration : headers\openvr_capi.h:283</i> */
		public static final int ETrackedDeviceProperty_Prop_AllWirelessDongleDescriptions_String = 1008;
		/** <i>native declaration : headers\openvr_capi.h:284</i> */
		public static final int ETrackedDeviceProperty_Prop_ConnectedWirelessDongle_String = 1009;
		/** <i>native declaration : headers\openvr_capi.h:285</i> */
		public static final int ETrackedDeviceProperty_Prop_DeviceIsWireless_Bool = 1010;
		/** <i>native declaration : headers\openvr_capi.h:286</i> */
		public static final int ETrackedDeviceProperty_Prop_DeviceIsCharging_Bool = 1011;
		/** <i>native declaration : headers\openvr_capi.h:287</i> */
		public static final int ETrackedDeviceProperty_Prop_DeviceBatteryPercentage_Float = 1012;
		/** <i>native declaration : headers\openvr_capi.h:288</i> */
		public static final int ETrackedDeviceProperty_Prop_StatusDisplayTransform_Matrix34 = 1013;
		/** <i>native declaration : headers\openvr_capi.h:289</i> */
		public static final int ETrackedDeviceProperty_Prop_Firmware_UpdateAvailable_Bool = 1014;
		/** <i>native declaration : headers\openvr_capi.h:290</i> */
		public static final int ETrackedDeviceProperty_Prop_Firmware_ManualUpdate_Bool = 1015;
		/** <i>native declaration : headers\openvr_capi.h:291</i> */
		public static final int ETrackedDeviceProperty_Prop_Firmware_ManualUpdateURL_String = 1016;
		/** <i>native declaration : headers\openvr_capi.h:292</i> */
		public static final int ETrackedDeviceProperty_Prop_HardwareRevision_Uint64 = 1017;
		/** <i>native declaration : headers\openvr_capi.h:293</i> */
		public static final int ETrackedDeviceProperty_Prop_FirmwareVersion_Uint64 = 1018;
		/** <i>native declaration : headers\openvr_capi.h:294</i> */
		public static final int ETrackedDeviceProperty_Prop_FPGAVersion_Uint64 = 1019;
		/** <i>native declaration : headers\openvr_capi.h:295</i> */
		public static final int ETrackedDeviceProperty_Prop_VRCVersion_Uint64 = 1020;
		/** <i>native declaration : headers\openvr_capi.h:296</i> */
		public static final int ETrackedDeviceProperty_Prop_RadioVersion_Uint64 = 1021;
		/** <i>native declaration : headers\openvr_capi.h:297</i> */
		public static final int ETrackedDeviceProperty_Prop_DongleVersion_Uint64 = 1022;
		/** <i>native declaration : headers\openvr_capi.h:298</i> */
		public static final int ETrackedDeviceProperty_Prop_BlockServerShutdown_Bool = 1023;
		/** <i>native declaration : headers\openvr_capi.h:299</i> */
		public static final int ETrackedDeviceProperty_Prop_CanUnifyCoordinateSystemWithHmd_Bool = 1024;
		/** <i>native declaration : headers\openvr_capi.h:300</i> */
		public static final int ETrackedDeviceProperty_Prop_ContainsProximitySensor_Bool = 1025;
		/** <i>native declaration : headers\openvr_capi.h:301</i> */
		public static final int ETrackedDeviceProperty_Prop_DeviceProvidesBatteryStatus_Bool = 1026;
		/** <i>native declaration : headers\openvr_capi.h:302</i> */
		public static final int ETrackedDeviceProperty_Prop_DeviceCanPowerOff_Bool = 1027;
		/** <i>native declaration : headers\openvr_capi.h:303</i> */
		public static final int ETrackedDeviceProperty_Prop_Firmware_ProgrammingTarget_String = 1028;
		/** <i>native declaration : headers\openvr_capi.h:304</i> */
		public static final int ETrackedDeviceProperty_Prop_DeviceClass_Int32 = 1029;
		/** <i>native declaration : headers\openvr_capi.h:305</i> */
		public static final int ETrackedDeviceProperty_Prop_HasCamera_Bool = 1030;
		/** <i>native declaration : headers\openvr_capi.h:306</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverVersion_String = 1031;
		/** <i>native declaration : headers\openvr_capi.h:307</i> */
		public static final int ETrackedDeviceProperty_Prop_Firmware_ForceUpdateRequired_Bool = 1032;
		/** <i>native declaration : headers\openvr_capi.h:308</i> */
		public static final int ETrackedDeviceProperty_Prop_ViveSystemButtonFixRequired_Bool = 1033;
		/** <i>native declaration : headers\openvr_capi.h:309</i> */
		public static final int ETrackedDeviceProperty_Prop_ParentDriver_Uint64 = 1034;
		/** <i>native declaration : headers\openvr_capi.h:310</i> */
		public static final int ETrackedDeviceProperty_Prop_ResourceRoot_String = 1035;
		/** <i>native declaration : headers\openvr_capi.h:311</i> */
		public static final int ETrackedDeviceProperty_Prop_RegisteredDeviceType_String = 1036;
		/** <i>native declaration : headers\openvr_capi.h:312</i> */
		public static final int ETrackedDeviceProperty_Prop_InputProfilePath_String = 1037;
		/** <i>native declaration : headers\openvr_capi.h:313</i> */
		public static final int ETrackedDeviceProperty_Prop_NeverTracked_Bool = 1038;
		/** <i>native declaration : headers\openvr_capi.h:314</i> */
		public static final int ETrackedDeviceProperty_Prop_NumCameras_Int32 = 1039;
		/** <i>native declaration : headers\openvr_capi.h:315</i> */
		public static final int ETrackedDeviceProperty_Prop_CameraFrameLayout_Int32 = 1040;
		/** <i>native declaration : headers\openvr_capi.h:316</i> */
		public static final int ETrackedDeviceProperty_Prop_ReportsTimeSinceVSync_Bool = 2000;
		/** <i>native declaration : headers\openvr_capi.h:317</i> */
		public static final int ETrackedDeviceProperty_Prop_SecondsFromVsyncToPhotons_Float = 2001;
		/** <i>native declaration : headers\openvr_capi.h:318</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayFrequency_Float = 2002;
		/** <i>native declaration : headers\openvr_capi.h:319</i> */
		public static final int ETrackedDeviceProperty_Prop_UserIpdMeters_Float = 2003;
		/** <i>native declaration : headers\openvr_capi.h:320</i> */
		public static final int ETrackedDeviceProperty_Prop_CurrentUniverseId_Uint64 = 2004;
		/** <i>native declaration : headers\openvr_capi.h:321</i> */
		public static final int ETrackedDeviceProperty_Prop_PreviousUniverseId_Uint64 = 2005;
		/** <i>native declaration : headers\openvr_capi.h:322</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayFirmwareVersion_Uint64 = 2006;
		/** <i>native declaration : headers\openvr_capi.h:323</i> */
		public static final int ETrackedDeviceProperty_Prop_IsOnDesktop_Bool = 2007;
		/** <i>native declaration : headers\openvr_capi.h:324</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCType_Int32 = 2008;
		/** <i>native declaration : headers\openvr_capi.h:325</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCOffset_Float = 2009;
		/** <i>native declaration : headers\openvr_capi.h:326</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCScale_Float = 2010;
		/** <i>native declaration : headers\openvr_capi.h:327</i> */
		public static final int ETrackedDeviceProperty_Prop_EdidVendorID_Int32 = 2011;
		/** <i>native declaration : headers\openvr_capi.h:328</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCImageLeft_String = 2012;
		/** <i>native declaration : headers\openvr_capi.h:329</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCImageRight_String = 2013;
		/** <i>native declaration : headers\openvr_capi.h:330</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayGCBlackClamp_Float = 2014;
		/** <i>native declaration : headers\openvr_capi.h:331</i> */
		public static final int ETrackedDeviceProperty_Prop_EdidProductID_Int32 = 2015;
		/** <i>native declaration : headers\openvr_capi.h:332</i> */
		public static final int ETrackedDeviceProperty_Prop_CameraToHeadTransform_Matrix34 = 2016;
		/** <i>native declaration : headers\openvr_capi.h:333</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayGCType_Int32 = 2017;
		/** <i>native declaration : headers\openvr_capi.h:334</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayGCOffset_Float = 2018;
		/** <i>native declaration : headers\openvr_capi.h:335</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayGCScale_Float = 2019;
		/** <i>native declaration : headers\openvr_capi.h:336</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayGCPrescale_Float = 2020;
		/** <i>native declaration : headers\openvr_capi.h:337</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayGCImage_String = 2021;
		/** <i>native declaration : headers\openvr_capi.h:338</i> */
		public static final int ETrackedDeviceProperty_Prop_LensCenterLeftU_Float = 2022;
		/** <i>native declaration : headers\openvr_capi.h:339</i> */
		public static final int ETrackedDeviceProperty_Prop_LensCenterLeftV_Float = 2023;
		/** <i>native declaration : headers\openvr_capi.h:340</i> */
		public static final int ETrackedDeviceProperty_Prop_LensCenterRightU_Float = 2024;
		/** <i>native declaration : headers\openvr_capi.h:341</i> */
		public static final int ETrackedDeviceProperty_Prop_LensCenterRightV_Float = 2025;
		/** <i>native declaration : headers\openvr_capi.h:342</i> */
		public static final int ETrackedDeviceProperty_Prop_UserHeadToEyeDepthMeters_Float = 2026;
		/** <i>native declaration : headers\openvr_capi.h:343</i> */
		public static final int ETrackedDeviceProperty_Prop_CameraFirmwareVersion_Uint64 = 2027;
		/** <i>native declaration : headers\openvr_capi.h:344</i> */
		public static final int ETrackedDeviceProperty_Prop_CameraFirmwareDescription_String = 2028;
		/** <i>native declaration : headers\openvr_capi.h:345</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayFPGAVersion_Uint64 = 2029;
		/** <i>native declaration : headers\openvr_capi.h:346</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayBootloaderVersion_Uint64 = 2030;
		/** <i>native declaration : headers\openvr_capi.h:347</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayHardwareVersion_Uint64 = 2031;
		/** <i>native declaration : headers\openvr_capi.h:348</i> */
		public static final int ETrackedDeviceProperty_Prop_AudioFirmwareVersion_Uint64 = 2032;
		/** <i>native declaration : headers\openvr_capi.h:349</i> */
		public static final int ETrackedDeviceProperty_Prop_CameraCompatibilityMode_Int32 = 2033;
		/** <i>native declaration : headers\openvr_capi.h:350</i> */
		public static final int ETrackedDeviceProperty_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float = 2034;
		/** <i>native declaration : headers\openvr_capi.h:351</i> */
		public static final int ETrackedDeviceProperty_Prop_ScreenshotVerticalFieldOfViewDegrees_Float = 2035;
		/** <i>native declaration : headers\openvr_capi.h:352</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplaySuppressed_Bool = 2036;
		/** <i>native declaration : headers\openvr_capi.h:353</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayAllowNightMode_Bool = 2037;
		/** <i>native declaration : headers\openvr_capi.h:354</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCImageWidth_Int32 = 2038;
		/** <i>native declaration : headers\openvr_capi.h:355</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCImageHeight_Int32 = 2039;
		/** <i>native declaration : headers\openvr_capi.h:356</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCImageNumChannels_Int32 = 2040;
		/** <i>native declaration : headers\openvr_capi.h:357</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayMCImageData_Binary = 2041;
		/** <i>native declaration : headers\openvr_capi.h:358</i> */
		public static final int ETrackedDeviceProperty_Prop_SecondsFromPhotonsToVblank_Float = 2042;
		/** <i>native declaration : headers\openvr_capi.h:359</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverDirectModeSendsVsyncEvents_Bool = 2043;
		/** <i>native declaration : headers\openvr_capi.h:360</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayDebugMode_Bool = 2044;
		/** <i>native declaration : headers\openvr_capi.h:361</i> */
		public static final int ETrackedDeviceProperty_Prop_GraphicsAdapterLuid_Uint64 = 2045;
		/** <i>native declaration : headers\openvr_capi.h:362</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverProvidedChaperonePath_String = 2048;
		/** <i>native declaration : headers\openvr_capi.h:363</i> */
		public static final int ETrackedDeviceProperty_Prop_ExpectedTrackingReferenceCount_Int32 = 2049;
		/** <i>native declaration : headers\openvr_capi.h:364</i> */
		public static final int ETrackedDeviceProperty_Prop_ExpectedControllerCount_Int32 = 2050;
		/** <i>native declaration : headers\openvr_capi.h:365</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathControllerLeftDeviceOff_String = 2051;
		/** <i>native declaration : headers\openvr_capi.h:366</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathControllerRightDeviceOff_String = 2052;
		/** <i>native declaration : headers\openvr_capi.h:367</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathTrackingReferenceDeviceOff_String = 2053;
		/** <i>native declaration : headers\openvr_capi.h:368</i> */
		public static final int ETrackedDeviceProperty_Prop_DoNotApplyPrediction_Bool = 2054;
		/** <i>native declaration : headers\openvr_capi.h:369</i> */
		public static final int ETrackedDeviceProperty_Prop_CameraToHeadTransforms_Matrix34_Array = 2055;
		/** <i>native declaration : headers\openvr_capi.h:370</i> */
		public static final int ETrackedDeviceProperty_Prop_DistortionMeshResolution_Int32 = 2056;
		/** <i>native declaration : headers\openvr_capi.h:371</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverIsDrawingControllers_Bool = 2057;
		/** <i>native declaration : headers\openvr_capi.h:372</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestsApplicationPause_Bool = 2058;
		/** <i>native declaration : headers\openvr_capi.h:373</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestsReducedRendering_Bool = 2059;
		/** <i>native declaration : headers\openvr_capi.h:374</i> */
		public static final int ETrackedDeviceProperty_Prop_MinimumIpdStepMeters_Float = 2060;
		/** <i>native declaration : headers\openvr_capi.h:375</i> */
		public static final int ETrackedDeviceProperty_Prop_AudioBridgeFirmwareVersion_Uint64 = 2061;
		/** <i>native declaration : headers\openvr_capi.h:376</i> */
		public static final int ETrackedDeviceProperty_Prop_ImageBridgeFirmwareVersion_Uint64 = 2062;
		/** <i>native declaration : headers\openvr_capi.h:377</i> */
		public static final int ETrackedDeviceProperty_Prop_ImuToHeadTransform_Matrix34 = 2063;
		/** <i>native declaration : headers\openvr_capi.h:378</i> */
		public static final int ETrackedDeviceProperty_Prop_ImuFactoryGyroBias_Vector3 = 2064;
		/** <i>native declaration : headers\openvr_capi.h:379</i> */
		public static final int ETrackedDeviceProperty_Prop_ImuFactoryGyroScale_Vector3 = 2065;
		/** <i>native declaration : headers\openvr_capi.h:380</i> */
		public static final int ETrackedDeviceProperty_Prop_ImuFactoryAccelerometerBias_Vector3 = 2066;
		/** <i>native declaration : headers\openvr_capi.h:381</i> */
		public static final int ETrackedDeviceProperty_Prop_ImuFactoryAccelerometerScale_Vector3 = 2067;
		/** <i>native declaration : headers\openvr_capi.h:382</i> */
		public static final int ETrackedDeviceProperty_Prop_ConfigurationIncludesLighthouse20Features_Bool = 2069;
		/** <i>native declaration : headers\openvr_capi.h:383</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraCorrectionMode_Int32 = 2200;
		/** <i>native declaration : headers\openvr_capi.h:384</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerLeft_Int32 = 2201;
		/** <i>native declaration : headers\openvr_capi.h:385</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerRight_Int32 = 2202;
		/** <i>native declaration : headers\openvr_capi.h:386</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerTop_Int32 = 2203;
		/** <i>native declaration : headers\openvr_capi.h:387</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerBottom_Int32 = 2204;
		/** <i>native declaration : headers\openvr_capi.h:388</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterLeft_Int32 = 2205;
		/** <i>native declaration : headers\openvr_capi.h:389</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterRight_Int32 = 2206;
		/** <i>native declaration : headers\openvr_capi.h:390</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterTop_Int32 = 2207;
		/** <i>native declaration : headers\openvr_capi.h:391</i> */
		public static final int ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterBottom_Int32 = 2208;
		/** <i>native declaration : headers\openvr_capi.h:392</i> */
		public static final int ETrackedDeviceProperty_Prop_AttachedDeviceId_String = 3000;
		/** <i>native declaration : headers\openvr_capi.h:393</i> */
		public static final int ETrackedDeviceProperty_Prop_SupportedButtons_Uint64 = 3001;
		/** <i>native declaration : headers\openvr_capi.h:394</i> */
		public static final int ETrackedDeviceProperty_Prop_Axis0Type_Int32 = 3002;
		/** <i>native declaration : headers\openvr_capi.h:395</i> */
		public static final int ETrackedDeviceProperty_Prop_Axis1Type_Int32 = 3003;
		/** <i>native declaration : headers\openvr_capi.h:396</i> */
		public static final int ETrackedDeviceProperty_Prop_Axis2Type_Int32 = 3004;
		/** <i>native declaration : headers\openvr_capi.h:397</i> */
		public static final int ETrackedDeviceProperty_Prop_Axis3Type_Int32 = 3005;
		/** <i>native declaration : headers\openvr_capi.h:398</i> */
		public static final int ETrackedDeviceProperty_Prop_Axis4Type_Int32 = 3006;
		/** <i>native declaration : headers\openvr_capi.h:399</i> */
		public static final int ETrackedDeviceProperty_Prop_ControllerRoleHint_Int32 = 3007;
		/** <i>native declaration : headers\openvr_capi.h:400</i> */
		public static final int ETrackedDeviceProperty_Prop_FieldOfViewLeftDegrees_Float = 4000;
		/** <i>native declaration : headers\openvr_capi.h:401</i> */
		public static final int ETrackedDeviceProperty_Prop_FieldOfViewRightDegrees_Float = 4001;
		/** <i>native declaration : headers\openvr_capi.h:402</i> */
		public static final int ETrackedDeviceProperty_Prop_FieldOfViewTopDegrees_Float = 4002;
		/** <i>native declaration : headers\openvr_capi.h:403</i> */
		public static final int ETrackedDeviceProperty_Prop_FieldOfViewBottomDegrees_Float = 4003;
		/** <i>native declaration : headers\openvr_capi.h:404</i> */
		public static final int ETrackedDeviceProperty_Prop_TrackingRangeMinimumMeters_Float = 4004;
		/** <i>native declaration : headers\openvr_capi.h:405</i> */
		public static final int ETrackedDeviceProperty_Prop_TrackingRangeMaximumMeters_Float = 4005;
		/** <i>native declaration : headers\openvr_capi.h:406</i> */
		public static final int ETrackedDeviceProperty_Prop_ModeLabel_String = 4006;
		/** <i>native declaration : headers\openvr_capi.h:407</i> */
		public static final int ETrackedDeviceProperty_Prop_IconPathName_String = 5000;
		/** <i>native declaration : headers\openvr_capi.h:408</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathDeviceOff_String = 5001;
		/** <i>native declaration : headers\openvr_capi.h:409</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathDeviceSearching_String = 5002;
		/** <i>native declaration : headers\openvr_capi.h:410</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathDeviceSearchingAlert_String = 5003;
		/** <i>native declaration : headers\openvr_capi.h:411</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathDeviceReady_String = 5004;
		/** <i>native declaration : headers\openvr_capi.h:412</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathDeviceReadyAlert_String = 5005;
		/** <i>native declaration : headers\openvr_capi.h:413</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathDeviceNotReady_String = 5006;
		/** <i>native declaration : headers\openvr_capi.h:414</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathDeviceStandby_String = 5007;
		/** <i>native declaration : headers\openvr_capi.h:415</i> */
		public static final int ETrackedDeviceProperty_Prop_NamedIconPathDeviceAlertLow_String = 5008;
		/** <i>native declaration : headers\openvr_capi.h:416</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayHiddenArea_Binary_Start = 5100;
		/** <i>native declaration : headers\openvr_capi.h:417</i> */
		public static final int ETrackedDeviceProperty_Prop_DisplayHiddenArea_Binary_End = 5150;
		/** <i>native declaration : headers\openvr_capi.h:418</i> */
		public static final int ETrackedDeviceProperty_Prop_ParentContainer = 5151;
		/** <i>native declaration : headers\openvr_capi.h:419</i> */
		public static final int ETrackedDeviceProperty_Prop_UserConfigPath_String = 6000;
		/** <i>native declaration : headers\openvr_capi.h:420</i> */
		public static final int ETrackedDeviceProperty_Prop_InstallPath_String = 6001;
		/** <i>native declaration : headers\openvr_capi.h:421</i> */
		public static final int ETrackedDeviceProperty_Prop_HasDisplayComponent_Bool = 6002;
		/** <i>native declaration : headers\openvr_capi.h:422</i> */
		public static final int ETrackedDeviceProperty_Prop_HasControllerComponent_Bool = 6003;
		/** <i>native declaration : headers\openvr_capi.h:423</i> */
		public static final int ETrackedDeviceProperty_Prop_HasCameraComponent_Bool = 6004;
		/** <i>native declaration : headers\openvr_capi.h:424</i> */
		public static final int ETrackedDeviceProperty_Prop_HasDriverDirectModeComponent_Bool = 6005;
		/** <i>native declaration : headers\openvr_capi.h:425</i> */
		public static final int ETrackedDeviceProperty_Prop_HasVirtualDisplayComponent_Bool = 6006;
		/** <i>native declaration : headers\openvr_capi.h:426</i> */
		public static final int ETrackedDeviceProperty_Prop_HasSpatialAnchorsSupport_Bool = 6007;
		/** <i>native declaration : headers\openvr_capi.h:427</i> */
		public static final int ETrackedDeviceProperty_Prop_ControllerType_String = 7000;
		/** <i>native declaration : headers\openvr_capi.h:428</i> */
		public static final int ETrackedDeviceProperty_Prop_LegacyInputProfile_String = 7001;
		/** <i>native declaration : headers\openvr_capi.h:429</i> */
		public static final int ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_Start = 10000;
		/** <i>native declaration : headers\openvr_capi.h:430</i> */
		public static final int ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_End = 10999;
		/** <i>native declaration : headers\openvr_capi.h:431</i> */
		public static final int ETrackedDeviceProperty_Prop_TrackedDeviceProperty_Max = 1000000;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:447</i><br>
	 * enum values
	 */
	public static interface ETrackedPropertyError {
		/** <i>native declaration : headers\openvr_capi.h:434</i> */
		public static final int ETrackedPropertyError_TrackedProp_Success = 0;
		/** <i>native declaration : headers\openvr_capi.h:435</i> */
		public static final int ETrackedPropertyError_TrackedProp_WrongDataType = 1;
		/** <i>native declaration : headers\openvr_capi.h:436</i> */
		public static final int ETrackedPropertyError_TrackedProp_WrongDeviceClass = 2;
		/** <i>native declaration : headers\openvr_capi.h:437</i> */
		public static final int ETrackedPropertyError_TrackedProp_BufferTooSmall = 3;
		/** <i>native declaration : headers\openvr_capi.h:438</i> */
		public static final int ETrackedPropertyError_TrackedProp_UnknownProperty = 4;
		/** <i>native declaration : headers\openvr_capi.h:439</i> */
		public static final int ETrackedPropertyError_TrackedProp_InvalidDevice = 5;
		/** <i>native declaration : headers\openvr_capi.h:440</i> */
		public static final int ETrackedPropertyError_TrackedProp_CouldNotContactServer = 6;
		/** <i>native declaration : headers\openvr_capi.h:441</i> */
		public static final int ETrackedPropertyError_TrackedProp_ValueNotProvidedByDevice = 7;
		/** <i>native declaration : headers\openvr_capi.h:442</i> */
		public static final int ETrackedPropertyError_TrackedProp_StringExceedsMaximumLength = 8;
		/** <i>native declaration : headers\openvr_capi.h:443</i> */
		public static final int ETrackedPropertyError_TrackedProp_NotYetAvailable = 9;
		/** <i>native declaration : headers\openvr_capi.h:444</i> */
		public static final int ETrackedPropertyError_TrackedProp_PermissionDenied = 10;
		/** <i>native declaration : headers\openvr_capi.h:445</i> */
		public static final int ETrackedPropertyError_TrackedProp_InvalidOperation = 11;
		/** <i>native declaration : headers\openvr_capi.h:446</i> */
		public static final int ETrackedPropertyError_TrackedProp_CannotWriteToWildcards = 12;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:455</i><br>
	 * enum values
	 */
	public static interface EVRSubmitFlags {
		/** <i>native declaration : headers\openvr_capi.h:449</i> */
		public static final int EVRSubmitFlags_Submit_Default = 0;
		/** <i>native declaration : headers\openvr_capi.h:450</i> */
		public static final int EVRSubmitFlags_Submit_LensDistortionAlreadyApplied = 1;
		/** <i>native declaration : headers\openvr_capi.h:451</i> */
		public static final int EVRSubmitFlags_Submit_GlRenderBuffer = 2;
		/** <i>native declaration : headers\openvr_capi.h:452</i> */
		public static final int EVRSubmitFlags_Submit_Reserved = 4;
		/** <i>native declaration : headers\openvr_capi.h:453</i> */
		public static final int EVRSubmitFlags_Submit_TextureWithPose = 8;
		/** <i>native declaration : headers\openvr_capi.h:454</i> */
		public static final int EVRSubmitFlags_Submit_TextureWithDepth = 16;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:466</i><br>
	 * enum values
	 */
	public static interface EVRState {
		/** <i>native declaration : headers\openvr_capi.h:457</i> */
		public static final int EVRState_VRState_Undefined = -1;
		/** <i>native declaration : headers\openvr_capi.h:458</i> */
		public static final int EVRState_VRState_Off = 0;
		/** <i>native declaration : headers\openvr_capi.h:459</i> */
		public static final int EVRState_VRState_Searching = 1;
		/** <i>native declaration : headers\openvr_capi.h:460</i> */
		public static final int EVRState_VRState_Searching_Alert = 2;
		/** <i>native declaration : headers\openvr_capi.h:461</i> */
		public static final int EVRState_VRState_Ready = 3;
		/** <i>native declaration : headers\openvr_capi.h:462</i> */
		public static final int EVRState_VRState_Ready_Alert = 4;
		/** <i>native declaration : headers\openvr_capi.h:463</i> */
		public static final int EVRState_VRState_NotReady = 5;
		/** <i>native declaration : headers\openvr_capi.h:464</i> */
		public static final int EVRState_VRState_Standby = 6;
		/** <i>native declaration : headers\openvr_capi.h:465</i> */
		public static final int EVRState_VRState_Ready_Alert_Low = 7;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:616</i><br>
	 * enum values
	 */
	public static interface EVREventType {
		/** <i>native declaration : headers\openvr_capi.h:468</i> */
		public static final int EVREventType_VREvent_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:469</i> */
		public static final int EVREventType_VREvent_TrackedDeviceActivated = 100;
		/** <i>native declaration : headers\openvr_capi.h:470</i> */
		public static final int EVREventType_VREvent_TrackedDeviceDeactivated = 101;
		/** <i>native declaration : headers\openvr_capi.h:471</i> */
		public static final int EVREventType_VREvent_TrackedDeviceUpdated = 102;
		/** <i>native declaration : headers\openvr_capi.h:472</i> */
		public static final int EVREventType_VREvent_TrackedDeviceUserInteractionStarted = 103;
		/** <i>native declaration : headers\openvr_capi.h:473</i> */
		public static final int EVREventType_VREvent_TrackedDeviceUserInteractionEnded = 104;
		/** <i>native declaration : headers\openvr_capi.h:474</i> */
		public static final int EVREventType_VREvent_IpdChanged = 105;
		/** <i>native declaration : headers\openvr_capi.h:475</i> */
		public static final int EVREventType_VREvent_EnterStandbyMode = 106;
		/** <i>native declaration : headers\openvr_capi.h:476</i> */
		public static final int EVREventType_VREvent_LeaveStandbyMode = 107;
		/** <i>native declaration : headers\openvr_capi.h:477</i> */
		public static final int EVREventType_VREvent_TrackedDeviceRoleChanged = 108;
		/** <i>native declaration : headers\openvr_capi.h:478</i> */
		public static final int EVREventType_VREvent_WatchdogWakeUpRequested = 109;
		/** <i>native declaration : headers\openvr_capi.h:479</i> */
		public static final int EVREventType_VREvent_LensDistortionChanged = 110;
		/** <i>native declaration : headers\openvr_capi.h:480</i> */
		public static final int EVREventType_VREvent_PropertyChanged = 111;
		/** <i>native declaration : headers\openvr_capi.h:481</i> */
		public static final int EVREventType_VREvent_WirelessDisconnect = 112;
		/** <i>native declaration : headers\openvr_capi.h:482</i> */
		public static final int EVREventType_VREvent_WirelessReconnect = 113;
		/** <i>native declaration : headers\openvr_capi.h:483</i> */
		public static final int EVREventType_VREvent_ButtonPress = 200;
		/** <i>native declaration : headers\openvr_capi.h:484</i> */
		public static final int EVREventType_VREvent_ButtonUnpress = 201;
		/** <i>native declaration : headers\openvr_capi.h:485</i> */
		public static final int EVREventType_VREvent_ButtonTouch = 202;
		/** <i>native declaration : headers\openvr_capi.h:486</i> */
		public static final int EVREventType_VREvent_ButtonUntouch = 203;
		/** <i>native declaration : headers\openvr_capi.h:487</i> */
		public static final int EVREventType_VREvent_DualAnalog_Press = 250;
		/** <i>native declaration : headers\openvr_capi.h:488</i> */
		public static final int EVREventType_VREvent_DualAnalog_Unpress = 251;
		/** <i>native declaration : headers\openvr_capi.h:489</i> */
		public static final int EVREventType_VREvent_DualAnalog_Touch = 252;
		/** <i>native declaration : headers\openvr_capi.h:490</i> */
		public static final int EVREventType_VREvent_DualAnalog_Untouch = 253;
		/** <i>native declaration : headers\openvr_capi.h:491</i> */
		public static final int EVREventType_VREvent_DualAnalog_Move = 254;
		/** <i>native declaration : headers\openvr_capi.h:492</i> */
		public static final int EVREventType_VREvent_DualAnalog_ModeSwitch1 = 255;
		/** <i>native declaration : headers\openvr_capi.h:493</i> */
		public static final int EVREventType_VREvent_DualAnalog_ModeSwitch2 = 256;
		/** <i>native declaration : headers\openvr_capi.h:494</i> */
		public static final int EVREventType_VREvent_DualAnalog_Cancel = 257;
		/** <i>native declaration : headers\openvr_capi.h:495</i> */
		public static final int EVREventType_VREvent_MouseMove = 300;
		/** <i>native declaration : headers\openvr_capi.h:496</i> */
		public static final int EVREventType_VREvent_MouseButtonDown = 301;
		/** <i>native declaration : headers\openvr_capi.h:497</i> */
		public static final int EVREventType_VREvent_MouseButtonUp = 302;
		/** <i>native declaration : headers\openvr_capi.h:498</i> */
		public static final int EVREventType_VREvent_FocusEnter = 303;
		/** <i>native declaration : headers\openvr_capi.h:499</i> */
		public static final int EVREventType_VREvent_FocusLeave = 304;
		/** <i>native declaration : headers\openvr_capi.h:500</i> */
		public static final int EVREventType_VREvent_Scroll = 305;
		/** <i>native declaration : headers\openvr_capi.h:501</i> */
		public static final int EVREventType_VREvent_TouchPadMove = 306;
		/** <i>native declaration : headers\openvr_capi.h:502</i> */
		public static final int EVREventType_VREvent_OverlayFocusChanged = 307;
		/** <i>native declaration : headers\openvr_capi.h:503</i> */
		public static final int EVREventType_VREvent_InputFocusCaptured = 400;
		/** <i>native declaration : headers\openvr_capi.h:504</i> */
		public static final int EVREventType_VREvent_InputFocusReleased = 401;
		/** <i>native declaration : headers\openvr_capi.h:505</i> */
		public static final int EVREventType_VREvent_SceneFocusLost = 402;
		/** <i>native declaration : headers\openvr_capi.h:506</i> */
		public static final int EVREventType_VREvent_SceneFocusGained = 403;
		/** <i>native declaration : headers\openvr_capi.h:507</i> */
		public static final int EVREventType_VREvent_SceneApplicationChanged = 404;
		/** <i>native declaration : headers\openvr_capi.h:508</i> */
		public static final int EVREventType_VREvent_SceneFocusChanged = 405;
		/** <i>native declaration : headers\openvr_capi.h:509</i> */
		public static final int EVREventType_VREvent_InputFocusChanged = 406;
		/** <i>native declaration : headers\openvr_capi.h:510</i> */
		public static final int EVREventType_VREvent_SceneApplicationSecondaryRenderingStarted = 407;
		/** <i>native declaration : headers\openvr_capi.h:511</i> */
		public static final int EVREventType_VREvent_SceneApplicationUsingWrongGraphicsAdapter = 408;
		/** <i>native declaration : headers\openvr_capi.h:512</i> */
		public static final int EVREventType_VREvent_ActionBindingReloaded = 409;
		/** <i>native declaration : headers\openvr_capi.h:513</i> */
		public static final int EVREventType_VREvent_HideRenderModels = 410;
		/** <i>native declaration : headers\openvr_capi.h:514</i> */
		public static final int EVREventType_VREvent_ShowRenderModels = 411;
		/** <i>native declaration : headers\openvr_capi.h:515</i> */
		public static final int EVREventType_VREvent_ConsoleOpened = 420;
		/** <i>native declaration : headers\openvr_capi.h:516</i> */
		public static final int EVREventType_VREvent_ConsoleClosed = 421;
		/** <i>native declaration : headers\openvr_capi.h:517</i> */
		public static final int EVREventType_VREvent_OverlayShown = 500;
		/** <i>native declaration : headers\openvr_capi.h:518</i> */
		public static final int EVREventType_VREvent_OverlayHidden = 501;
		/** <i>native declaration : headers\openvr_capi.h:519</i> */
		public static final int EVREventType_VREvent_DashboardActivated = 502;
		/** <i>native declaration : headers\openvr_capi.h:520</i> */
		public static final int EVREventType_VREvent_DashboardDeactivated = 503;
		/** <i>native declaration : headers\openvr_capi.h:521</i> */
		public static final int EVREventType_VREvent_DashboardThumbSelected = 504;
		/** <i>native declaration : headers\openvr_capi.h:522</i> */
		public static final int EVREventType_VREvent_DashboardRequested = 505;
		/** <i>native declaration : headers\openvr_capi.h:523</i> */
		public static final int EVREventType_VREvent_ResetDashboard = 506;
		/** <i>native declaration : headers\openvr_capi.h:524</i> */
		public static final int EVREventType_VREvent_RenderToast = 507;
		/** <i>native declaration : headers\openvr_capi.h:525</i> */
		public static final int EVREventType_VREvent_ImageLoaded = 508;
		/** <i>native declaration : headers\openvr_capi.h:526</i> */
		public static final int EVREventType_VREvent_ShowKeyboard = 509;
		/** <i>native declaration : headers\openvr_capi.h:527</i> */
		public static final int EVREventType_VREvent_HideKeyboard = 510;
		/** <i>native declaration : headers\openvr_capi.h:528</i> */
		public static final int EVREventType_VREvent_OverlayGamepadFocusGained = 511;
		/** <i>native declaration : headers\openvr_capi.h:529</i> */
		public static final int EVREventType_VREvent_OverlayGamepadFocusLost = 512;
		/** <i>native declaration : headers\openvr_capi.h:530</i> */
		public static final int EVREventType_VREvent_OverlaySharedTextureChanged = 513;
		/** <i>native declaration : headers\openvr_capi.h:531</i> */
		public static final int EVREventType_VREvent_ScreenshotTriggered = 516;
		/** <i>native declaration : headers\openvr_capi.h:532</i> */
		public static final int EVREventType_VREvent_ImageFailed = 517;
		/** <i>native declaration : headers\openvr_capi.h:533</i> */
		public static final int EVREventType_VREvent_DashboardOverlayCreated = 518;
		/** <i>native declaration : headers\openvr_capi.h:534</i> */
		public static final int EVREventType_VREvent_SwitchGamepadFocus = 519;
		/** <i>native declaration : headers\openvr_capi.h:535</i> */
		public static final int EVREventType_VREvent_RequestScreenshot = 520;
		/** <i>native declaration : headers\openvr_capi.h:536</i> */
		public static final int EVREventType_VREvent_ScreenshotTaken = 521;
		/** <i>native declaration : headers\openvr_capi.h:537</i> */
		public static final int EVREventType_VREvent_ScreenshotFailed = 522;
		/** <i>native declaration : headers\openvr_capi.h:538</i> */
		public static final int EVREventType_VREvent_SubmitScreenshotToDashboard = 523;
		/** <i>native declaration : headers\openvr_capi.h:539</i> */
		public static final int EVREventType_VREvent_ScreenshotProgressToDashboard = 524;
		/** <i>native declaration : headers\openvr_capi.h:540</i> */
		public static final int EVREventType_VREvent_PrimaryDashboardDeviceChanged = 525;
		/** <i>native declaration : headers\openvr_capi.h:541</i> */
		public static final int EVREventType_VREvent_RoomViewShown = 526;
		/** <i>native declaration : headers\openvr_capi.h:542</i> */
		public static final int EVREventType_VREvent_RoomViewHidden = 527;
		/** <i>native declaration : headers\openvr_capi.h:543</i> */
		public static final int EVREventType_VREvent_Notification_Shown = 600;
		/** <i>native declaration : headers\openvr_capi.h:544</i> */
		public static final int EVREventType_VREvent_Notification_Hidden = 601;
		/** <i>native declaration : headers\openvr_capi.h:545</i> */
		public static final int EVREventType_VREvent_Notification_BeginInteraction = 602;
		/** <i>native declaration : headers\openvr_capi.h:546</i> */
		public static final int EVREventType_VREvent_Notification_Destroyed = 603;
		/** <i>native declaration : headers\openvr_capi.h:547</i> */
		public static final int EVREventType_VREvent_Quit = 700;
		/** <i>native declaration : headers\openvr_capi.h:548</i> */
		public static final int EVREventType_VREvent_ProcessQuit = 701;
		/** <i>native declaration : headers\openvr_capi.h:549</i> */
		public static final int EVREventType_VREvent_QuitAborted_UserPrompt = 702;
		/** <i>native declaration : headers\openvr_capi.h:550</i> */
		public static final int EVREventType_VREvent_QuitAcknowledged = 703;
		/** <i>native declaration : headers\openvr_capi.h:551</i> */
		public static final int EVREventType_VREvent_DriverRequestedQuit = 704;
		/** <i>native declaration : headers\openvr_capi.h:552</i> */
		public static final int EVREventType_VREvent_ChaperoneDataHasChanged = 800;
		/** <i>native declaration : headers\openvr_capi.h:553</i> */
		public static final int EVREventType_VREvent_ChaperoneUniverseHasChanged = 801;
		/** <i>native declaration : headers\openvr_capi.h:554</i> */
		public static final int EVREventType_VREvent_ChaperoneTempDataHasChanged = 802;
		/** <i>native declaration : headers\openvr_capi.h:555</i> */
		public static final int EVREventType_VREvent_ChaperoneSettingsHaveChanged = 803;
		/** <i>native declaration : headers\openvr_capi.h:556</i> */
		public static final int EVREventType_VREvent_SeatedZeroPoseReset = 804;
		/** <i>native declaration : headers\openvr_capi.h:557</i> */
		public static final int EVREventType_VREvent_AudioSettingsHaveChanged = 820;
		/** <i>native declaration : headers\openvr_capi.h:558</i> */
		public static final int EVREventType_VREvent_BackgroundSettingHasChanged = 850;
		/** <i>native declaration : headers\openvr_capi.h:559</i> */
		public static final int EVREventType_VREvent_CameraSettingsHaveChanged = 851;
		/** <i>native declaration : headers\openvr_capi.h:560</i> */
		public static final int EVREventType_VREvent_ReprojectionSettingHasChanged = 852;
		/** <i>native declaration : headers\openvr_capi.h:561</i> */
		public static final int EVREventType_VREvent_ModelSkinSettingsHaveChanged = 853;
		/** <i>native declaration : headers\openvr_capi.h:562</i> */
		public static final int EVREventType_VREvent_EnvironmentSettingsHaveChanged = 854;
		/** <i>native declaration : headers\openvr_capi.h:563</i> */
		public static final int EVREventType_VREvent_PowerSettingsHaveChanged = 855;
		/** <i>native declaration : headers\openvr_capi.h:564</i> */
		public static final int EVREventType_VREvent_EnableHomeAppSettingsHaveChanged = 856;
		/** <i>native declaration : headers\openvr_capi.h:565</i> */
		public static final int EVREventType_VREvent_SteamVRSectionSettingChanged = 857;
		/** <i>native declaration : headers\openvr_capi.h:566</i> */
		public static final int EVREventType_VREvent_LighthouseSectionSettingChanged = 858;
		/** <i>native declaration : headers\openvr_capi.h:567</i> */
		public static final int EVREventType_VREvent_NullSectionSettingChanged = 859;
		/** <i>native declaration : headers\openvr_capi.h:568</i> */
		public static final int EVREventType_VREvent_UserInterfaceSectionSettingChanged = 860;
		/** <i>native declaration : headers\openvr_capi.h:569</i> */
		public static final int EVREventType_VREvent_NotificationsSectionSettingChanged = 861;
		/** <i>native declaration : headers\openvr_capi.h:570</i> */
		public static final int EVREventType_VREvent_KeyboardSectionSettingChanged = 862;
		/** <i>native declaration : headers\openvr_capi.h:571</i> */
		public static final int EVREventType_VREvent_PerfSectionSettingChanged = 863;
		/** <i>native declaration : headers\openvr_capi.h:572</i> */
		public static final int EVREventType_VREvent_DashboardSectionSettingChanged = 864;
		/** <i>native declaration : headers\openvr_capi.h:573</i> */
		public static final int EVREventType_VREvent_WebInterfaceSectionSettingChanged = 865;
		/** <i>native declaration : headers\openvr_capi.h:574</i> */
		public static final int EVREventType_VREvent_TrackersSectionSettingChanged = 866;
		/** <i>native declaration : headers\openvr_capi.h:575</i> */
		public static final int EVREventType_VREvent_StatusUpdate = 900;
		/** <i>native declaration : headers\openvr_capi.h:576</i> */
		public static final int EVREventType_VREvent_WebInterface_InstallDriverCompleted = 950;
		/** <i>native declaration : headers\openvr_capi.h:577</i> */
		public static final int EVREventType_VREvent_MCImageUpdated = 1000;
		/** <i>native declaration : headers\openvr_capi.h:578</i> */
		public static final int EVREventType_VREvent_FirmwareUpdateStarted = 1100;
		/** <i>native declaration : headers\openvr_capi.h:579</i> */
		public static final int EVREventType_VREvent_FirmwareUpdateFinished = 1101;
		/** <i>native declaration : headers\openvr_capi.h:580</i> */
		public static final int EVREventType_VREvent_KeyboardClosed = 1200;
		/** <i>native declaration : headers\openvr_capi.h:581</i> */
		public static final int EVREventType_VREvent_KeyboardCharInput = 1201;
		/** <i>native declaration : headers\openvr_capi.h:582</i> */
		public static final int EVREventType_VREvent_KeyboardDone = 1202;
		/** <i>native declaration : headers\openvr_capi.h:583</i> */
		public static final int EVREventType_VREvent_ApplicationTransitionStarted = 1300;
		/** <i>native declaration : headers\openvr_capi.h:584</i> */
		public static final int EVREventType_VREvent_ApplicationTransitionAborted = 1301;
		/** <i>native declaration : headers\openvr_capi.h:585</i> */
		public static final int EVREventType_VREvent_ApplicationTransitionNewAppStarted = 1302;
		/** <i>native declaration : headers\openvr_capi.h:586</i> */
		public static final int EVREventType_VREvent_ApplicationListUpdated = 1303;
		/** <i>native declaration : headers\openvr_capi.h:587</i> */
		public static final int EVREventType_VREvent_ApplicationMimeTypeLoad = 1304;
		/** <i>native declaration : headers\openvr_capi.h:588</i> */
		public static final int EVREventType_VREvent_ApplicationTransitionNewAppLaunchComplete = 1305;
		/** <i>native declaration : headers\openvr_capi.h:589</i> */
		public static final int EVREventType_VREvent_ProcessConnected = 1306;
		/** <i>native declaration : headers\openvr_capi.h:590</i> */
		public static final int EVREventType_VREvent_ProcessDisconnected = 1307;
		/** <i>native declaration : headers\openvr_capi.h:591</i> */
		public static final int EVREventType_VREvent_Compositor_MirrorWindowShown = 1400;
		/** <i>native declaration : headers\openvr_capi.h:592</i> */
		public static final int EVREventType_VREvent_Compositor_MirrorWindowHidden = 1401;
		/** <i>native declaration : headers\openvr_capi.h:593</i> */
		public static final int EVREventType_VREvent_Compositor_ChaperoneBoundsShown = 1410;
		/** <i>native declaration : headers\openvr_capi.h:594</i> */
		public static final int EVREventType_VREvent_Compositor_ChaperoneBoundsHidden = 1411;
		/** <i>native declaration : headers\openvr_capi.h:595</i> */
		public static final int EVREventType_VREvent_TrackedCamera_StartVideoStream = 1500;
		/** <i>native declaration : headers\openvr_capi.h:596</i> */
		public static final int EVREventType_VREvent_TrackedCamera_StopVideoStream = 1501;
		/** <i>native declaration : headers\openvr_capi.h:597</i> */
		public static final int EVREventType_VREvent_TrackedCamera_PauseVideoStream = 1502;
		/** <i>native declaration : headers\openvr_capi.h:598</i> */
		public static final int EVREventType_VREvent_TrackedCamera_ResumeVideoStream = 1503;
		/** <i>native declaration : headers\openvr_capi.h:599</i> */
		public static final int EVREventType_VREvent_TrackedCamera_EditingSurface = 1550;
		/** <i>native declaration : headers\openvr_capi.h:600</i> */
		public static final int EVREventType_VREvent_PerformanceTest_EnableCapture = 1600;
		/** <i>native declaration : headers\openvr_capi.h:601</i> */
		public static final int EVREventType_VREvent_PerformanceTest_DisableCapture = 1601;
		/** <i>native declaration : headers\openvr_capi.h:602</i> */
		public static final int EVREventType_VREvent_PerformanceTest_FidelityLevel = 1602;
		/** <i>native declaration : headers\openvr_capi.h:603</i> */
		public static final int EVREventType_VREvent_MessageOverlay_Closed = 1650;
		/** <i>native declaration : headers\openvr_capi.h:604</i> */
		public static final int EVREventType_VREvent_MessageOverlayCloseRequested = 1651;
		/** <i>native declaration : headers\openvr_capi.h:605</i> */
		public static final int EVREventType_VREvent_Input_HapticVibration = 1700;
		/** <i>native declaration : headers\openvr_capi.h:606</i> */
		public static final int EVREventType_VREvent_Input_BindingLoadFailed = 1701;
		/** <i>native declaration : headers\openvr_capi.h:607</i> */
		public static final int EVREventType_VREvent_Input_BindingLoadSuccessful = 1702;
		/** <i>native declaration : headers\openvr_capi.h:608</i> */
		public static final int EVREventType_VREvent_Input_ActionManifestReloaded = 1703;
		/** <i>native declaration : headers\openvr_capi.h:609</i> */
		public static final int EVREventType_VREvent_Input_ActionManifestLoadFailed = 1704;
		/** <i>native declaration : headers\openvr_capi.h:610</i> */
		public static final int EVREventType_VREvent_SpatialAnchors_PoseUpdated = 1800;
		/** <i>native declaration : headers\openvr_capi.h:611</i> */
		public static final int EVREventType_VREvent_SpatialAnchors_DescriptorUpdated = 1801;
		/** <i>native declaration : headers\openvr_capi.h:612</i> */
		public static final int EVREventType_VREvent_SpatialAnchors_RequestPoseUpdate = 1802;
		/** <i>native declaration : headers\openvr_capi.h:613</i> */
		public static final int EVREventType_VREvent_SpatialAnchors_RequestDescriptorUpdate = 1803;
		/** <i>native declaration : headers\openvr_capi.h:614</i> */
		public static final int EVREventType_VREvent_VendorSpecific_Reserved_Start = 10000;
		/** <i>native declaration : headers\openvr_capi.h:615</i> */
		public static final int EVREventType_VREvent_VendorSpecific_Reserved_End = 19999;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:623</i><br>
	 * enum values
	 */
	public static interface EDeviceActivityLevel {
		/** <i>native declaration : headers\openvr_capi.h:618</i> */
		public static final int EDeviceActivityLevel_k_EDeviceActivityLevel_Unknown = -1;
		/** <i>native declaration : headers\openvr_capi.h:619</i> */
		public static final int EDeviceActivityLevel_k_EDeviceActivityLevel_Idle = 0;
		/** <i>native declaration : headers\openvr_capi.h:620</i> */
		public static final int EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction = 1;
		/** <i>native declaration : headers\openvr_capi.h:621</i> */
		public static final int EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction_Timeout = 2;
		/** <i>native declaration : headers\openvr_capi.h:622</i> */
		public static final int EDeviceActivityLevel_k_EDeviceActivityLevel_Standby = 3;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:646</i><br>
	 * enum values
	 */
	public static interface EVRButtonId {
		/** <i>native declaration : headers\openvr_capi.h:625</i> */
		public static final int EVRButtonId_k_EButton_System = 0;
		/** <i>native declaration : headers\openvr_capi.h:626</i> */
		public static final int EVRButtonId_k_EButton_ApplicationMenu = 1;
		/** <i>native declaration : headers\openvr_capi.h:627</i> */
		public static final int EVRButtonId_k_EButton_Grip = 2;
		/** <i>native declaration : headers\openvr_capi.h:628</i> */
		public static final int EVRButtonId_k_EButton_DPad_Left = 3;
		/** <i>native declaration : headers\openvr_capi.h:629</i> */
		public static final int EVRButtonId_k_EButton_DPad_Up = 4;
		/** <i>native declaration : headers\openvr_capi.h:630</i> */
		public static final int EVRButtonId_k_EButton_DPad_Right = 5;
		/** <i>native declaration : headers\openvr_capi.h:631</i> */
		public static final int EVRButtonId_k_EButton_DPad_Down = 6;
		/** <i>native declaration : headers\openvr_capi.h:632</i> */
		public static final int EVRButtonId_k_EButton_A = 7;
		/** <i>native declaration : headers\openvr_capi.h:633</i> */
		public static final int EVRButtonId_k_EButton_ProximitySensor = 31;
		/** <i>native declaration : headers\openvr_capi.h:634</i> */
		public static final int EVRButtonId_k_EButton_Axis0 = 32;
		/** <i>native declaration : headers\openvr_capi.h:635</i> */
		public static final int EVRButtonId_k_EButton_Axis1 = 33;
		/** <i>native declaration : headers\openvr_capi.h:636</i> */
		public static final int EVRButtonId_k_EButton_Axis2 = 34;
		/** <i>native declaration : headers\openvr_capi.h:637</i> */
		public static final int EVRButtonId_k_EButton_Axis3 = 35;
		/** <i>native declaration : headers\openvr_capi.h:638</i> */
		public static final int EVRButtonId_k_EButton_Axis4 = 36;
		/** <i>native declaration : headers\openvr_capi.h:639</i> */
		public static final int EVRButtonId_k_EButton_SteamVR_Touchpad = 32;
		/** <i>native declaration : headers\openvr_capi.h:640</i> */
		public static final int EVRButtonId_k_EButton_SteamVR_Trigger = 33;
		/** <i>native declaration : headers\openvr_capi.h:641</i> */
		public static final int EVRButtonId_k_EButton_Dashboard_Back = 2;
		/** <i>native declaration : headers\openvr_capi.h:642</i> */
		public static final int EVRButtonId_k_EButton_Knuckles_A = 2;
		/** <i>native declaration : headers\openvr_capi.h:643</i> */
		public static final int EVRButtonId_k_EButton_Knuckles_B = 1;
		/** <i>native declaration : headers\openvr_capi.h:644</i> */
		public static final int EVRButtonId_k_EButton_Knuckles_JoyStick = 35;
		/** <i>native declaration : headers\openvr_capi.h:645</i> */
		public static final int EVRButtonId_k_EButton_Max = 64;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:651</i><br>
	 * enum values
	 */
	public static interface EVRMouseButton {
		/** <i>native declaration : headers\openvr_capi.h:648</i> */
		public static final int EVRMouseButton_VRMouseButton_Left = 1;
		/** <i>native declaration : headers\openvr_capi.h:649</i> */
		public static final int EVRMouseButton_VRMouseButton_Right = 2;
		/** <i>native declaration : headers\openvr_capi.h:650</i> */
		public static final int EVRMouseButton_VRMouseButton_Middle = 4;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:655</i><br>
	 * enum values
	 */
	public static interface EDualAnalogWhich {
		/** <i>native declaration : headers\openvr_capi.h:653</i> */
		public static final int EDualAnalogWhich_k_EDualAnalog_Left = 0;
		/** <i>native declaration : headers\openvr_capi.h:654</i> */
		public static final int EDualAnalogWhich_k_EDualAnalog_Right = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:674</i><br>
	 * enum values
	 */
	public static interface EVRInputError {
		/** <i>native declaration : headers\openvr_capi.h:657</i> */
		public static final int EVRInputError_VRInputError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:658</i> */
		public static final int EVRInputError_VRInputError_NameNotFound = 1;
		/** <i>native declaration : headers\openvr_capi.h:659</i> */
		public static final int EVRInputError_VRInputError_WrongType = 2;
		/** <i>native declaration : headers\openvr_capi.h:660</i> */
		public static final int EVRInputError_VRInputError_InvalidHandle = 3;
		/** <i>native declaration : headers\openvr_capi.h:661</i> */
		public static final int EVRInputError_VRInputError_InvalidParam = 4;
		/** <i>native declaration : headers\openvr_capi.h:662</i> */
		public static final int EVRInputError_VRInputError_NoSteam = 5;
		/** <i>native declaration : headers\openvr_capi.h:663</i> */
		public static final int EVRInputError_VRInputError_MaxCapacityReached = 6;
		/** <i>native declaration : headers\openvr_capi.h:664</i> */
		public static final int EVRInputError_VRInputError_IPCError = 7;
		/** <i>native declaration : headers\openvr_capi.h:665</i> */
		public static final int EVRInputError_VRInputError_NoActiveActionSet = 8;
		/** <i>native declaration : headers\openvr_capi.h:666</i> */
		public static final int EVRInputError_VRInputError_InvalidDevice = 9;
		/** <i>native declaration : headers\openvr_capi.h:667</i> */
		public static final int EVRInputError_VRInputError_InvalidSkeleton = 10;
		/** <i>native declaration : headers\openvr_capi.h:668</i> */
		public static final int EVRInputError_VRInputError_InvalidBoneCount = 11;
		/** <i>native declaration : headers\openvr_capi.h:669</i> */
		public static final int EVRInputError_VRInputError_InvalidCompressedData = 12;
		/** <i>native declaration : headers\openvr_capi.h:670</i> */
		public static final int EVRInputError_VRInputError_NoData = 13;
		/** <i>native declaration : headers\openvr_capi.h:671</i> */
		public static final int EVRInputError_VRInputError_BufferTooSmall = 14;
		/** <i>native declaration : headers\openvr_capi.h:672</i> */
		public static final int EVRInputError_VRInputError_MismatchedActionManifest = 15;
		/** <i>native declaration : headers\openvr_capi.h:673</i> */
		public static final int EVRInputError_VRInputError_MissingSkeletonData = 16;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:690</i><br>
	 * enum values
	 */
	public static interface EVRSpatialAnchorError {
		/** <i>native declaration : headers\openvr_capi.h:676</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_Success = 0;
		/** <i>native declaration : headers\openvr_capi.h:677</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_Internal = 1;
		/** <i>native declaration : headers\openvr_capi.h:678</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_UnknownHandle = 2;
		/** <i>native declaration : headers\openvr_capi.h:679</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_ArrayTooSmall = 3;
		/** <i>native declaration : headers\openvr_capi.h:680</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_InvalidDescriptorChar = 4;
		/** <i>native declaration : headers\openvr_capi.h:681</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_NotYetAvailable = 5;
		/** <i>native declaration : headers\openvr_capi.h:682</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_NotAvailableInThisUniverse = 6;
		/** <i>native declaration : headers\openvr_capi.h:683</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_PermanentlyUnavailable = 7;
		/** <i>native declaration : headers\openvr_capi.h:684</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_WrongDriver = 8;
		/** <i>native declaration : headers\openvr_capi.h:685</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_DescriptorTooLong = 9;
		/** <i>native declaration : headers\openvr_capi.h:686</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_Unknown = 10;
		/** <i>native declaration : headers\openvr_capi.h:687</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_NoRoomCalibration = 11;
		/** <i>native declaration : headers\openvr_capi.h:688</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_InvalidArgument = 12;
		/** <i>native declaration : headers\openvr_capi.h:689</i> */
		public static final int EVRSpatialAnchorError_VRSpatialAnchorError_UnknownDriver = 13;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:696</i><br>
	 * enum values
	 */
	public static interface EHiddenAreaMeshType {
		/** <i>native declaration : headers\openvr_capi.h:692</i> */
		public static final int EHiddenAreaMeshType_k_eHiddenAreaMesh_Standard = 0;
		/** <i>native declaration : headers\openvr_capi.h:693</i> */
		public static final int EHiddenAreaMeshType_k_eHiddenAreaMesh_Inverse = 1;
		/** <i>native declaration : headers\openvr_capi.h:694</i> */
		public static final int EHiddenAreaMeshType_k_eHiddenAreaMesh_LineLoop = 2;
		/** <i>native declaration : headers\openvr_capi.h:695</i> */
		public static final int EHiddenAreaMeshType_k_eHiddenAreaMesh_Max = 3;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:702</i><br>
	 * enum values
	 */
	public static interface EVRControllerAxisType {
		/** <i>native declaration : headers\openvr_capi.h:698</i> */
		public static final int EVRControllerAxisType_k_eControllerAxis_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:699</i> */
		public static final int EVRControllerAxisType_k_eControllerAxis_TrackPad = 1;
		/** <i>native declaration : headers\openvr_capi.h:700</i> */
		public static final int EVRControllerAxisType_k_eControllerAxis_Joystick = 2;
		/** <i>native declaration : headers\openvr_capi.h:701</i> */
		public static final int EVRControllerAxisType_k_eControllerAxis_Trigger = 3;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:706</i><br>
	 * enum values
	 */
	public static interface EVRControllerEventOutputType {
		/** <i>native declaration : headers\openvr_capi.h:704</i> */
		public static final int EVRControllerEventOutputType_ControllerEventOutput_OSEvents = 0;
		/** <i>native declaration : headers\openvr_capi.h:705</i> */
		public static final int EVRControllerEventOutputType_ControllerEventOutput_VREvents = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:714</i><br>
	 * enum values
	 */
	public static interface ECollisionBoundsStyle {
		/** <i>native declaration : headers\openvr_capi.h:708</i> */
		public static final int ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_BEGINNER = 0;
		/** <i>native declaration : headers\openvr_capi.h:709</i> */
		public static final int ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_INTERMEDIATE = 1;
		/** <i>native declaration : headers\openvr_capi.h:710</i> */
		public static final int ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_SQUARES = 2;
		/** <i>native declaration : headers\openvr_capi.h:711</i> */
		public static final int ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_ADVANCED = 3;
		/** <i>native declaration : headers\openvr_capi.h:712</i> */
		public static final int ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_NONE = 4;
		/** <i>native declaration : headers\openvr_capi.h:713</i> */
		public static final int ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_COUNT = 5;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:740</i><br>
	 * enum values
	 */
	public static interface EVROverlayError {
		/** <i>native declaration : headers\openvr_capi.h:716</i> */
		public static final int EVROverlayError_VROverlayError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:717</i> */
		public static final int EVROverlayError_VROverlayError_UnknownOverlay = 10;
		/** <i>native declaration : headers\openvr_capi.h:718</i> */
		public static final int EVROverlayError_VROverlayError_InvalidHandle = 11;
		/** <i>native declaration : headers\openvr_capi.h:719</i> */
		public static final int EVROverlayError_VROverlayError_PermissionDenied = 12;
		/** <i>native declaration : headers\openvr_capi.h:720</i> */
		public static final int EVROverlayError_VROverlayError_OverlayLimitExceeded = 13;
		/** <i>native declaration : headers\openvr_capi.h:721</i> */
		public static final int EVROverlayError_VROverlayError_WrongVisibilityType = 14;
		/** <i>native declaration : headers\openvr_capi.h:722</i> */
		public static final int EVROverlayError_VROverlayError_KeyTooLong = 15;
		/** <i>native declaration : headers\openvr_capi.h:723</i> */
		public static final int EVROverlayError_VROverlayError_NameTooLong = 16;
		/** <i>native declaration : headers\openvr_capi.h:724</i> */
		public static final int EVROverlayError_VROverlayError_KeyInUse = 17;
		/** <i>native declaration : headers\openvr_capi.h:725</i> */
		public static final int EVROverlayError_VROverlayError_WrongTransformType = 18;
		/** <i>native declaration : headers\openvr_capi.h:726</i> */
		public static final int EVROverlayError_VROverlayError_InvalidTrackedDevice = 19;
		/** <i>native declaration : headers\openvr_capi.h:727</i> */
		public static final int EVROverlayError_VROverlayError_InvalidParameter = 20;
		/** <i>native declaration : headers\openvr_capi.h:728</i> */
		public static final int EVROverlayError_VROverlayError_ThumbnailCantBeDestroyed = 21;
		/** <i>native declaration : headers\openvr_capi.h:729</i> */
		public static final int EVROverlayError_VROverlayError_ArrayTooSmall = 22;
		/** <i>native declaration : headers\openvr_capi.h:730</i> */
		public static final int EVROverlayError_VROverlayError_RequestFailed = 23;
		/** <i>native declaration : headers\openvr_capi.h:731</i> */
		public static final int EVROverlayError_VROverlayError_InvalidTexture = 24;
		/** <i>native declaration : headers\openvr_capi.h:732</i> */
		public static final int EVROverlayError_VROverlayError_UnableToLoadFile = 25;
		/** <i>native declaration : headers\openvr_capi.h:733</i> */
		public static final int EVROverlayError_VROverlayError_KeyboardAlreadyInUse = 26;
		/** <i>native declaration : headers\openvr_capi.h:734</i> */
		public static final int EVROverlayError_VROverlayError_NoNeighbor = 27;
		/** <i>native declaration : headers\openvr_capi.h:735</i> */
		public static final int EVROverlayError_VROverlayError_TooManyMaskPrimitives = 29;
		/** <i>native declaration : headers\openvr_capi.h:736</i> */
		public static final int EVROverlayError_VROverlayError_BadMaskPrimitive = 30;
		/** <i>native declaration : headers\openvr_capi.h:737</i> */
		public static final int EVROverlayError_VROverlayError_TextureAlreadyLocked = 31;
		/** <i>native declaration : headers\openvr_capi.h:738</i> */
		public static final int EVROverlayError_VROverlayError_TextureLockCapacityReached = 32;
		/** <i>native declaration : headers\openvr_capi.h:739</i> */
		public static final int EVROverlayError_VROverlayError_TextureNotLocked = 33;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:751</i><br>
	 * enum values
	 */
	public static interface EVRApplicationType {
		/** <i>native declaration : headers\openvr_capi.h:742</i> */
		public static final int EVRApplicationType_VRApplication_Other = 0;
		/** <i>native declaration : headers\openvr_capi.h:743</i> */
		public static final int EVRApplicationType_VRApplication_Scene = 1;
		/** <i>native declaration : headers\openvr_capi.h:744</i> */
		public static final int EVRApplicationType_VRApplication_Overlay = 2;
		/** <i>native declaration : headers\openvr_capi.h:745</i> */
		public static final int EVRApplicationType_VRApplication_Background = 3;
		/** <i>native declaration : headers\openvr_capi.h:746</i> */
		public static final int EVRApplicationType_VRApplication_Utility = 4;
		/** <i>native declaration : headers\openvr_capi.h:747</i> */
		public static final int EVRApplicationType_VRApplication_VRMonitor = 5;
		/** <i>native declaration : headers\openvr_capi.h:748</i> */
		public static final int EVRApplicationType_VRApplication_SteamWatchdog = 6;
		/** <i>native declaration : headers\openvr_capi.h:749</i> */
		public static final int EVRApplicationType_VRApplication_Bootstrapper = 7;
		/** <i>native declaration : headers\openvr_capi.h:750</i> */
		public static final int EVRApplicationType_VRApplication_Max = 8;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:756</i><br>
	 * enum values
	 */
	public static interface EVRFirmwareError {
		/** <i>native declaration : headers\openvr_capi.h:753</i> */
		public static final int EVRFirmwareError_VRFirmwareError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:754</i> */
		public static final int EVRFirmwareError_VRFirmwareError_Success = 1;
		/** <i>native declaration : headers\openvr_capi.h:755</i> */
		public static final int EVRFirmwareError_VRFirmwareError_Fail = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:763</i><br>
	 * enum values
	 */
	public static interface EVRNotificationError {
		/** <i>native declaration : headers\openvr_capi.h:758</i> */
		public static final int EVRNotificationError_VRNotificationError_OK = 0;
		/** <i>native declaration : headers\openvr_capi.h:759</i> */
		public static final int EVRNotificationError_VRNotificationError_InvalidNotificationId = 100;
		/** <i>native declaration : headers\openvr_capi.h:760</i> */
		public static final int EVRNotificationError_VRNotificationError_NotificationQueueFull = 101;
		/** <i>native declaration : headers\openvr_capi.h:761</i> */
		public static final int EVRNotificationError_VRNotificationError_InvalidOverlayHandle = 102;
		/** <i>native declaration : headers\openvr_capi.h:762</i> */
		public static final int EVRNotificationError_VRNotificationError_SystemWithUserValueAlreadyExists = 103;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:767</i><br>
	 * enum values
	 */
	public static interface EVRSkeletalMotionRange {
		/** <i>native declaration : headers\openvr_capi.h:765</i> */
		public static final int EVRSkeletalMotionRange_VRSkeletalMotionRange_WithController = 0;
		/** <i>native declaration : headers\openvr_capi.h:766</i> */
		public static final int EVRSkeletalMotionRange_VRSkeletalMotionRange_WithoutController = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:857</i><br>
	 * enum values
	 */
	public static interface EVRInitError {
		/** <i>native declaration : headers\openvr_capi.h:769</i> */
		public static final int EVRInitError_VRInitError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:770</i> */
		public static final int EVRInitError_VRInitError_Unknown = 1;
		/** <i>native declaration : headers\openvr_capi.h:771</i> */
		public static final int EVRInitError_VRInitError_Init_InstallationNotFound = 100;
		/** <i>native declaration : headers\openvr_capi.h:772</i> */
		public static final int EVRInitError_VRInitError_Init_InstallationCorrupt = 101;
		/** <i>native declaration : headers\openvr_capi.h:773</i> */
		public static final int EVRInitError_VRInitError_Init_VRClientDLLNotFound = 102;
		/** <i>native declaration : headers\openvr_capi.h:774</i> */
		public static final int EVRInitError_VRInitError_Init_FileNotFound = 103;
		/** <i>native declaration : headers\openvr_capi.h:775</i> */
		public static final int EVRInitError_VRInitError_Init_FactoryNotFound = 104;
		/** <i>native declaration : headers\openvr_capi.h:776</i> */
		public static final int EVRInitError_VRInitError_Init_InterfaceNotFound = 105;
		/** <i>native declaration : headers\openvr_capi.h:777</i> */
		public static final int EVRInitError_VRInitError_Init_InvalidInterface = 106;
		/** <i>native declaration : headers\openvr_capi.h:778</i> */
		public static final int EVRInitError_VRInitError_Init_UserConfigDirectoryInvalid = 107;
		/** <i>native declaration : headers\openvr_capi.h:779</i> */
		public static final int EVRInitError_VRInitError_Init_HmdNotFound = 108;
		/** <i>native declaration : headers\openvr_capi.h:780</i> */
		public static final int EVRInitError_VRInitError_Init_NotInitialized = 109;
		/** <i>native declaration : headers\openvr_capi.h:781</i> */
		public static final int EVRInitError_VRInitError_Init_PathRegistryNotFound = 110;
		/** <i>native declaration : headers\openvr_capi.h:782</i> */
		public static final int EVRInitError_VRInitError_Init_NoConfigPath = 111;
		/** <i>native declaration : headers\openvr_capi.h:783</i> */
		public static final int EVRInitError_VRInitError_Init_NoLogPath = 112;
		/** <i>native declaration : headers\openvr_capi.h:784</i> */
		public static final int EVRInitError_VRInitError_Init_PathRegistryNotWritable = 113;
		/** <i>native declaration : headers\openvr_capi.h:785</i> */
		public static final int EVRInitError_VRInitError_Init_AppInfoInitFailed = 114;
		/** <i>native declaration : headers\openvr_capi.h:786</i> */
		public static final int EVRInitError_VRInitError_Init_Retry = 115;
		/** <i>native declaration : headers\openvr_capi.h:787</i> */
		public static final int EVRInitError_VRInitError_Init_InitCanceledByUser = 116;
		/** <i>native declaration : headers\openvr_capi.h:788</i> */
		public static final int EVRInitError_VRInitError_Init_AnotherAppLaunching = 117;
		/** <i>native declaration : headers\openvr_capi.h:789</i> */
		public static final int EVRInitError_VRInitError_Init_SettingsInitFailed = 118;
		/** <i>native declaration : headers\openvr_capi.h:790</i> */
		public static final int EVRInitError_VRInitError_Init_ShuttingDown = 119;
		/** <i>native declaration : headers\openvr_capi.h:791</i> */
		public static final int EVRInitError_VRInitError_Init_TooManyObjects = 120;
		/** <i>native declaration : headers\openvr_capi.h:792</i> */
		public static final int EVRInitError_VRInitError_Init_NoServerForBackgroundApp = 121;
		/** <i>native declaration : headers\openvr_capi.h:793</i> */
		public static final int EVRInitError_VRInitError_Init_NotSupportedWithCompositor = 122;
		/** <i>native declaration : headers\openvr_capi.h:794</i> */
		public static final int EVRInitError_VRInitError_Init_NotAvailableToUtilityApps = 123;
		/** <i>native declaration : headers\openvr_capi.h:795</i> */
		public static final int EVRInitError_VRInitError_Init_Internal = 124;
		/** <i>native declaration : headers\openvr_capi.h:796</i> */
		public static final int EVRInitError_VRInitError_Init_HmdDriverIdIsNone = 125;
		/** <i>native declaration : headers\openvr_capi.h:797</i> */
		public static final int EVRInitError_VRInitError_Init_HmdNotFoundPresenceFailed = 126;
		/** <i>native declaration : headers\openvr_capi.h:798</i> */
		public static final int EVRInitError_VRInitError_Init_VRMonitorNotFound = 127;
		/** <i>native declaration : headers\openvr_capi.h:799</i> */
		public static final int EVRInitError_VRInitError_Init_VRMonitorStartupFailed = 128;
		/** <i>native declaration : headers\openvr_capi.h:800</i> */
		public static final int EVRInitError_VRInitError_Init_LowPowerWatchdogNotSupported = 129;
		/** <i>native declaration : headers\openvr_capi.h:801</i> */
		public static final int EVRInitError_VRInitError_Init_InvalidApplicationType = 130;
		/** <i>native declaration : headers\openvr_capi.h:802</i> */
		public static final int EVRInitError_VRInitError_Init_NotAvailableToWatchdogApps = 131;
		/** <i>native declaration : headers\openvr_capi.h:803</i> */
		public static final int EVRInitError_VRInitError_Init_WatchdogDisabledInSettings = 132;
		/** <i>native declaration : headers\openvr_capi.h:804</i> */
		public static final int EVRInitError_VRInitError_Init_VRDashboardNotFound = 133;
		/** <i>native declaration : headers\openvr_capi.h:805</i> */
		public static final int EVRInitError_VRInitError_Init_VRDashboardStartupFailed = 134;
		/** <i>native declaration : headers\openvr_capi.h:806</i> */
		public static final int EVRInitError_VRInitError_Init_VRHomeNotFound = 135;
		/** <i>native declaration : headers\openvr_capi.h:807</i> */
		public static final int EVRInitError_VRInitError_Init_VRHomeStartupFailed = 136;
		/** <i>native declaration : headers\openvr_capi.h:808</i> */
		public static final int EVRInitError_VRInitError_Init_RebootingBusy = 137;
		/** <i>native declaration : headers\openvr_capi.h:809</i> */
		public static final int EVRInitError_VRInitError_Init_FirmwareUpdateBusy = 138;
		/** <i>native declaration : headers\openvr_capi.h:810</i> */
		public static final int EVRInitError_VRInitError_Init_FirmwareRecoveryBusy = 139;
		/** <i>native declaration : headers\openvr_capi.h:811</i> */
		public static final int EVRInitError_VRInitError_Init_USBServiceBusy = 140;
		/** <i>native declaration : headers\openvr_capi.h:812</i> */
		public static final int EVRInitError_VRInitError_Init_VRWebHelperStartupFailed = 141;
		/** <i>native declaration : headers\openvr_capi.h:813</i> */
		public static final int EVRInitError_VRInitError_Init_TrackerManagerInitFailed = 142;
		/** <i>native declaration : headers\openvr_capi.h:814</i> */
		public static final int EVRInitError_VRInitError_Driver_Failed = 200;
		/** <i>native declaration : headers\openvr_capi.h:815</i> */
		public static final int EVRInitError_VRInitError_Driver_Unknown = 201;
		/** <i>native declaration : headers\openvr_capi.h:816</i> */
		public static final int EVRInitError_VRInitError_Driver_HmdUnknown = 202;
		/** <i>native declaration : headers\openvr_capi.h:817</i> */
		public static final int EVRInitError_VRInitError_Driver_NotLoaded = 203;
		/** <i>native declaration : headers\openvr_capi.h:818</i> */
		public static final int EVRInitError_VRInitError_Driver_RuntimeOutOfDate = 204;
		/** <i>native declaration : headers\openvr_capi.h:819</i> */
		public static final int EVRInitError_VRInitError_Driver_HmdInUse = 205;
		/** <i>native declaration : headers\openvr_capi.h:820</i> */
		public static final int EVRInitError_VRInitError_Driver_NotCalibrated = 206;
		/** <i>native declaration : headers\openvr_capi.h:821</i> */
		public static final int EVRInitError_VRInitError_Driver_CalibrationInvalid = 207;
		/** <i>native declaration : headers\openvr_capi.h:822</i> */
		public static final int EVRInitError_VRInitError_Driver_HmdDisplayNotFound = 208;
		/** <i>native declaration : headers\openvr_capi.h:823</i> */
		public static final int EVRInitError_VRInitError_Driver_TrackedDeviceInterfaceUnknown = 209;
		/** <i>native declaration : headers\openvr_capi.h:824</i> */
		public static final int EVRInitError_VRInitError_Driver_HmdDriverIdOutOfBounds = 211;
		/** <i>native declaration : headers\openvr_capi.h:825</i> */
		public static final int EVRInitError_VRInitError_Driver_HmdDisplayMirrored = 212;
		/** <i>native declaration : headers\openvr_capi.h:826</i> */
		public static final int EVRInitError_VRInitError_IPC_ServerInitFailed = 300;
		/** <i>native declaration : headers\openvr_capi.h:827</i> */
		public static final int EVRInitError_VRInitError_IPC_ConnectFailed = 301;
		/** <i>native declaration : headers\openvr_capi.h:828</i> */
		public static final int EVRInitError_VRInitError_IPC_SharedStateInitFailed = 302;
		/** <i>native declaration : headers\openvr_capi.h:829</i> */
		public static final int EVRInitError_VRInitError_IPC_CompositorInitFailed = 303;
		/** <i>native declaration : headers\openvr_capi.h:830</i> */
		public static final int EVRInitError_VRInitError_IPC_MutexInitFailed = 304;
		/** <i>native declaration : headers\openvr_capi.h:831</i> */
		public static final int EVRInitError_VRInitError_IPC_Failed = 305;
		/** <i>native declaration : headers\openvr_capi.h:832</i> */
		public static final int EVRInitError_VRInitError_IPC_CompositorConnectFailed = 306;
		/** <i>native declaration : headers\openvr_capi.h:833</i> */
		public static final int EVRInitError_VRInitError_IPC_CompositorInvalidConnectResponse = 307;
		/** <i>native declaration : headers\openvr_capi.h:834</i> */
		public static final int EVRInitError_VRInitError_IPC_ConnectFailedAfterMultipleAttempts = 308;
		/** <i>native declaration : headers\openvr_capi.h:835</i> */
		public static final int EVRInitError_VRInitError_Compositor_Failed = 400;
		/** <i>native declaration : headers\openvr_capi.h:836</i> */
		public static final int EVRInitError_VRInitError_Compositor_D3D11HardwareRequired = 401;
		/** <i>native declaration : headers\openvr_capi.h:837</i> */
		public static final int EVRInitError_VRInitError_Compositor_FirmwareRequiresUpdate = 402;
		/** <i>native declaration : headers\openvr_capi.h:838</i> */
		public static final int EVRInitError_VRInitError_Compositor_OverlayInitFailed = 403;
		/** <i>native declaration : headers\openvr_capi.h:839</i> */
		public static final int EVRInitError_VRInitError_Compositor_ScreenshotsInitFailed = 404;
		/** <i>native declaration : headers\openvr_capi.h:840</i> */
		public static final int EVRInitError_VRInitError_Compositor_UnableToCreateDevice = 405;
		/** <i>native declaration : headers\openvr_capi.h:841</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_UnableToConnectToOculusRuntime = 1000;
		/** <i>native declaration : headers\openvr_capi.h:842</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_WindowsNotInDevMode = 1001;
		/** <i>native declaration : headers\openvr_capi.h:843</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_CantOpenDevice = 1101;
		/** <i>native declaration : headers\openvr_capi.h:844</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToRequestConfigStart = 1102;
		/** <i>native declaration : headers\openvr_capi.h:845</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_NoStoredConfig = 1103;
		/** <i>native declaration : headers\openvr_capi.h:846</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooBig = 1104;
		/** <i>native declaration : headers\openvr_capi.h:847</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooSmall = 1105;
		/** <i>native declaration : headers\openvr_capi.h:848</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToInitZLib = 1106;
		/** <i>native declaration : headers\openvr_capi.h:849</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_CantReadFirmwareVersion = 1107;
		/** <i>native declaration : headers\openvr_capi.h:850</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToSendUserDataStart = 1108;
		/** <i>native declaration : headers\openvr_capi.h:851</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataStart = 1109;
		/** <i>native declaration : headers\openvr_capi.h:852</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataNext = 1110;
		/** <i>native declaration : headers\openvr_capi.h:853</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataAddressRange = 1111;
		/** <i>native declaration : headers\openvr_capi.h:854</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataError = 1112;
		/** <i>native declaration : headers\openvr_capi.h:855</i> */
		public static final int EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigFailedSanityCheck = 1113;
		/** <i>native declaration : headers\openvr_capi.h:856</i> */
		public static final int EVRInitError_VRInitError_Steam_SteamInstallationNotFound = 2000;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:865</i><br>
	 * enum values
	 */
	public static interface EVRScreenshotType {
		/** <i>native declaration : headers\openvr_capi.h:859</i> */
		public static final int EVRScreenshotType_VRScreenshotType_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:860</i> */
		public static final int EVRScreenshotType_VRScreenshotType_Mono = 1;
		/** <i>native declaration : headers\openvr_capi.h:861</i> */
		public static final int EVRScreenshotType_VRScreenshotType_Stereo = 2;
		/** <i>native declaration : headers\openvr_capi.h:862</i> */
		public static final int EVRScreenshotType_VRScreenshotType_Cubemap = 3;
		/** <i>native declaration : headers\openvr_capi.h:863</i> */
		public static final int EVRScreenshotType_VRScreenshotType_MonoPanorama = 4;
		/** <i>native declaration : headers\openvr_capi.h:864</i> */
		public static final int EVRScreenshotType_VRScreenshotType_StereoPanorama = 5;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:869</i><br>
	 * enum values
	 */
	public static interface EVRScreenshotPropertyFilenames {
		/** <i>native declaration : headers\openvr_capi.h:867</i> */
		public static final int EVRScreenshotPropertyFilenames_VRScreenshotPropertyFilenames_Preview = 0;
		/** <i>native declaration : headers\openvr_capi.h:868</i> */
		public static final int EVRScreenshotPropertyFilenames_VRScreenshotPropertyFilenames_VR = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:888</i><br>
	 * enum values
	 */
	public static interface EVRTrackedCameraError {
		/** <i>native declaration : headers\openvr_capi.h:871</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:872</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_OperationFailed = 100;
		/** <i>native declaration : headers\openvr_capi.h:873</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_InvalidHandle = 101;
		/** <i>native declaration : headers\openvr_capi.h:874</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_InvalidFrameHeaderVersion = 102;
		/** <i>native declaration : headers\openvr_capi.h:875</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_OutOfHandles = 103;
		/** <i>native declaration : headers\openvr_capi.h:876</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_IPCFailure = 104;
		/** <i>native declaration : headers\openvr_capi.h:877</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_NotSupportedForThisDevice = 105;
		/** <i>native declaration : headers\openvr_capi.h:878</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_SharedMemoryFailure = 106;
		/** <i>native declaration : headers\openvr_capi.h:879</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_FrameBufferingFailure = 107;
		/** <i>native declaration : headers\openvr_capi.h:880</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_StreamSetupFailure = 108;
		/** <i>native declaration : headers\openvr_capi.h:881</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_InvalidGLTextureId = 109;
		/** <i>native declaration : headers\openvr_capi.h:882</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_InvalidSharedTextureHandle = 110;
		/** <i>native declaration : headers\openvr_capi.h:883</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_FailedToGetGLTextureId = 111;
		/** <i>native declaration : headers\openvr_capi.h:884</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_SharedTextureFailure = 112;
		/** <i>native declaration : headers\openvr_capi.h:885</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_NoFrameAvailable = 113;
		/** <i>native declaration : headers\openvr_capi.h:886</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_InvalidArgument = 114;
		/** <i>native declaration : headers\openvr_capi.h:887</i> */
		public static final int EVRTrackedCameraError_VRTrackedCameraError_InvalidFrameBufferSize = 115;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:894</i><br>
	 * enum values
	 */
	public static interface EVRTrackedCameraFrameLayout {
		/** <i>native declaration : headers\openvr_capi.h:890</i> */
		public static final int EVRTrackedCameraFrameLayout_Mono = 1;
		/** <i>native declaration : headers\openvr_capi.h:891</i> */
		public static final int EVRTrackedCameraFrameLayout_Stereo = 2;
		/** <i>native declaration : headers\openvr_capi.h:892</i> */
		public static final int EVRTrackedCameraFrameLayout_VerticalLayout = 16;
		/** <i>native declaration : headers\openvr_capi.h:893</i> */
		public static final int EVRTrackedCameraFrameLayout_HorizontalLayout = 32;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:900</i><br>
	 * enum values
	 */
	public static interface EVRTrackedCameraFrameType {
		/** <i>native declaration : headers\openvr_capi.h:896</i> */
		public static final int EVRTrackedCameraFrameType_VRTrackedCameraFrameType_Distorted = 0;
		/** <i>native declaration : headers\openvr_capi.h:897</i> */
		public static final int EVRTrackedCameraFrameType_VRTrackedCameraFrameType_Undistorted = 1;
		/** <i>native declaration : headers\openvr_capi.h:898</i> */
		public static final int EVRTrackedCameraFrameType_VRTrackedCameraFrameType_MaximumUndistorted = 2;
		/** <i>native declaration : headers\openvr_capi.h:899</i> */
		public static final int EVRTrackedCameraFrameType_MAX_CAMERA_FRAME_TYPES = 3;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:905</i><br>
	 * enum values
	 */
	public static interface EVSync {
		/** <i>native declaration : headers\openvr_capi.h:902</i> */
		public static final int EVSync_VSync_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:903</i> */
		public static final int EVSync_VSync_WaitRender = 1;
		/** <i>native declaration : headers\openvr_capi.h:904</i> */
		public static final int EVSync_VSync_NoWaitRender = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:909</i><br>
	 * enum values
	 */
	public static interface EVRMuraCorrectionMode {
		/** <i>native declaration : headers\openvr_capi.h:907</i> */
		public static final int EVRMuraCorrectionMode_Default = 0;
		/** <i>native declaration : headers\openvr_capi.h:908</i> */
		public static final int EVRMuraCorrectionMode_NoCorrection = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:917</i><br>
	 * enum values
	 */
	public static interface Imu_OffScaleFlags {
		/** <i>native declaration : headers\openvr_capi.h:911</i> */
		public static final int Imu_OffScaleFlags_OffScale_AccelX = 1;
		/** <i>native declaration : headers\openvr_capi.h:912</i> */
		public static final int Imu_OffScaleFlags_OffScale_AccelY = 2;
		/** <i>native declaration : headers\openvr_capi.h:913</i> */
		public static final int Imu_OffScaleFlags_OffScale_AccelZ = 4;
		/** <i>native declaration : headers\openvr_capi.h:914</i> */
		public static final int Imu_OffScaleFlags_OffScale_GyroX = 8;
		/** <i>native declaration : headers\openvr_capi.h:915</i> */
		public static final int Imu_OffScaleFlags_OffScale_GyroY = 16;
		/** <i>native declaration : headers\openvr_capi.h:916</i> */
		public static final int Imu_OffScaleFlags_OffScale_GyroZ = 32;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:940</i><br>
	 * enum values
	 */
	public static interface EVRApplicationError {
		/** <i>native declaration : headers\openvr_capi.h:919</i> */
		public static final int EVRApplicationError_VRApplicationError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:920</i> */
		public static final int EVRApplicationError_VRApplicationError_AppKeyAlreadyExists = 100;
		/** <i>native declaration : headers\openvr_capi.h:921</i> */
		public static final int EVRApplicationError_VRApplicationError_NoManifest = 101;
		/** <i>native declaration : headers\openvr_capi.h:922</i> */
		public static final int EVRApplicationError_VRApplicationError_NoApplication = 102;
		/** <i>native declaration : headers\openvr_capi.h:923</i> */
		public static final int EVRApplicationError_VRApplicationError_InvalidIndex = 103;
		/** <i>native declaration : headers\openvr_capi.h:924</i> */
		public static final int EVRApplicationError_VRApplicationError_UnknownApplication = 104;
		/** <i>native declaration : headers\openvr_capi.h:925</i> */
		public static final int EVRApplicationError_VRApplicationError_IPCFailed = 105;
		/** <i>native declaration : headers\openvr_capi.h:926</i> */
		public static final int EVRApplicationError_VRApplicationError_ApplicationAlreadyRunning = 106;
		/** <i>native declaration : headers\openvr_capi.h:927</i> */
		public static final int EVRApplicationError_VRApplicationError_InvalidManifest = 107;
		/** <i>native declaration : headers\openvr_capi.h:928</i> */
		public static final int EVRApplicationError_VRApplicationError_InvalidApplication = 108;
		/** <i>native declaration : headers\openvr_capi.h:929</i> */
		public static final int EVRApplicationError_VRApplicationError_LaunchFailed = 109;
		/** <i>native declaration : headers\openvr_capi.h:930</i> */
		public static final int EVRApplicationError_VRApplicationError_ApplicationAlreadyStarting = 110;
		/** <i>native declaration : headers\openvr_capi.h:931</i> */
		public static final int EVRApplicationError_VRApplicationError_LaunchInProgress = 111;
		/** <i>native declaration : headers\openvr_capi.h:932</i> */
		public static final int EVRApplicationError_VRApplicationError_OldApplicationQuitting = 112;
		/** <i>native declaration : headers\openvr_capi.h:933</i> */
		public static final int EVRApplicationError_VRApplicationError_TransitionAborted = 113;
		/** <i>native declaration : headers\openvr_capi.h:934</i> */
		public static final int EVRApplicationError_VRApplicationError_IsTemplate = 114;
		/** <i>native declaration : headers\openvr_capi.h:935</i> */
		public static final int EVRApplicationError_VRApplicationError_SteamVRIsExiting = 115;
		/** <i>native declaration : headers\openvr_capi.h:936</i> */
		public static final int EVRApplicationError_VRApplicationError_BufferTooSmall = 200;
		/** <i>native declaration : headers\openvr_capi.h:937</i> */
		public static final int EVRApplicationError_VRApplicationError_PropertyNotSet = 201;
		/** <i>native declaration : headers\openvr_capi.h:938</i> */
		public static final int EVRApplicationError_VRApplicationError_UnknownProperty = 202;
		/** <i>native declaration : headers\openvr_capi.h:939</i> */
		public static final int EVRApplicationError_VRApplicationError_InvalidParameter = 203;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:959</i><br>
	 * enum values
	 */
	public static interface EVRApplicationProperty {
		/** <i>native declaration : headers\openvr_capi.h:942</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_Name_String = 0;
		/** <i>native declaration : headers\openvr_capi.h:943</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_LaunchType_String = 11;
		/** <i>native declaration : headers\openvr_capi.h:944</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_WorkingDirectory_String = 12;
		/** <i>native declaration : headers\openvr_capi.h:945</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_BinaryPath_String = 13;
		/** <i>native declaration : headers\openvr_capi.h:946</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_Arguments_String = 14;
		/** <i>native declaration : headers\openvr_capi.h:947</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_URL_String = 15;
		/** <i>native declaration : headers\openvr_capi.h:948</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_Description_String = 50;
		/** <i>native declaration : headers\openvr_capi.h:949</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_NewsURL_String = 51;
		/** <i>native declaration : headers\openvr_capi.h:950</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_ImagePath_String = 52;
		/** <i>native declaration : headers\openvr_capi.h:951</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_Source_String = 53;
		/** <i>native declaration : headers\openvr_capi.h:952</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_ActionManifestURL_String = 54;
		/** <i>native declaration : headers\openvr_capi.h:953</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_IsDashboardOverlay_Bool = 60;
		/** <i>native declaration : headers\openvr_capi.h:954</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_IsTemplate_Bool = 61;
		/** <i>native declaration : headers\openvr_capi.h:955</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_IsInstanced_Bool = 62;
		/** <i>native declaration : headers\openvr_capi.h:956</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_IsInternal_Bool = 63;
		/** <i>native declaration : headers\openvr_capi.h:957</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_WantsCompositorPauseInStandby_Bool = 64;
		/** <i>native declaration : headers\openvr_capi.h:958</i> */
		public static final int EVRApplicationProperty_VRApplicationProperty_LastLaunchTime_Uint64 = 70;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:965</i><br>
	 * enum values
	 */
	public static interface EVRApplicationTransitionState {
		/** <i>native declaration : headers\openvr_capi.h:961</i> */
		public static final int EVRApplicationTransitionState_VRApplicationTransition_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:962</i> */
		public static final int EVRApplicationTransitionState_VRApplicationTransition_OldAppQuitSent = 10;
		/** <i>native declaration : headers\openvr_capi.h:963</i> */
		public static final int EVRApplicationTransitionState_VRApplicationTransition_WaitingForExternalLaunch = 11;
		/** <i>native declaration : headers\openvr_capi.h:964</i> */
		public static final int EVRApplicationTransitionState_VRApplicationTransition_NewAppLaunched = 20;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:977</i><br>
	 * enum values
	 */
	public static interface ChaperoneCalibrationState {
		/** <i>native declaration : headers\openvr_capi.h:967</i> */
		public static final int ChaperoneCalibrationState_OK = 1;
		/** <i>native declaration : headers\openvr_capi.h:968</i> */
		public static final int ChaperoneCalibrationState_Warning = 100;
		/** <i>native declaration : headers\openvr_capi.h:969</i> */
		public static final int ChaperoneCalibrationState_Warning_BaseStationMayHaveMoved = 101;
		/** <i>native declaration : headers\openvr_capi.h:970</i> */
		public static final int ChaperoneCalibrationState_Warning_BaseStationRemoved = 102;
		/** <i>native declaration : headers\openvr_capi.h:971</i> */
		public static final int ChaperoneCalibrationState_Warning_SeatedBoundsInvalid = 103;
		/** <i>native declaration : headers\openvr_capi.h:972</i> */
		public static final int ChaperoneCalibrationState_Error = 200;
		/** <i>native declaration : headers\openvr_capi.h:973</i> */
		public static final int ChaperoneCalibrationState_Error_BaseStationUninitialized = 201;
		/** <i>native declaration : headers\openvr_capi.h:974</i> */
		public static final int ChaperoneCalibrationState_Error_BaseStationConflict = 202;
		/** <i>native declaration : headers\openvr_capi.h:975</i> */
		public static final int ChaperoneCalibrationState_Error_PlayAreaInvalid = 203;
		/** <i>native declaration : headers\openvr_capi.h:976</i> */
		public static final int ChaperoneCalibrationState_Error_CollisionBoundsInvalid = 204;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:981</i><br>
	 * enum values
	 */
	public static interface EChaperoneConfigFile {
		/** <i>native declaration : headers\openvr_capi.h:979</i> */
		public static final int EChaperoneConfigFile_Live = 1;
		/** <i>native declaration : headers\openvr_capi.h:980</i> */
		public static final int EChaperoneConfigFile_Temp = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:984</i><br>
	 * enum values
	 */
	public static interface EChaperoneImportFlags {
		/** <i>native declaration : headers\openvr_capi.h:983</i> */
		public static final int EChaperoneImportFlags_EChaperoneImport_BoundsOnly = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:998</i><br>
	 * enum values
	 */
	public static interface EVRCompositorError {
		/** <i>native declaration : headers\openvr_capi.h:986</i> */
		public static final int EVRCompositorError_VRCompositorError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:987</i> */
		public static final int EVRCompositorError_VRCompositorError_RequestFailed = 1;
		/** <i>native declaration : headers\openvr_capi.h:988</i> */
		public static final int EVRCompositorError_VRCompositorError_IncompatibleVersion = 100;
		/** <i>native declaration : headers\openvr_capi.h:989</i> */
		public static final int EVRCompositorError_VRCompositorError_DoNotHaveFocus = 101;
		/** <i>native declaration : headers\openvr_capi.h:990</i> */
		public static final int EVRCompositorError_VRCompositorError_InvalidTexture = 102;
		/** <i>native declaration : headers\openvr_capi.h:991</i> */
		public static final int EVRCompositorError_VRCompositorError_IsNotSceneApplication = 103;
		/** <i>native declaration : headers\openvr_capi.h:992</i> */
		public static final int EVRCompositorError_VRCompositorError_TextureIsOnWrongDevice = 104;
		/** <i>native declaration : headers\openvr_capi.h:993</i> */
		public static final int EVRCompositorError_VRCompositorError_TextureUsesUnsupportedFormat = 105;
		/** <i>native declaration : headers\openvr_capi.h:994</i> */
		public static final int EVRCompositorError_VRCompositorError_SharedTexturesNotSupported = 106;
		/** <i>native declaration : headers\openvr_capi.h:995</i> */
		public static final int EVRCompositorError_VRCompositorError_IndexOutOfRange = 107;
		/** <i>native declaration : headers\openvr_capi.h:996</i> */
		public static final int EVRCompositorError_VRCompositorError_AlreadySubmitted = 108;
		/** <i>native declaration : headers\openvr_capi.h:997</i> */
		public static final int EVRCompositorError_VRCompositorError_InvalidBounds = 109;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1003</i><br>
	 * enum values
	 */
	public static interface EVRCompositorTimingMode {
		/** <i>native declaration : headers\openvr_capi.h:1000</i> */
		public static final int EVRCompositorTimingMode_VRCompositorTimingMode_Implicit = 0;
		/** <i>native declaration : headers\openvr_capi.h:1001</i> */
		public static final int EVRCompositorTimingMode_VRCompositorTimingMode_Explicit_RuntimePerformsPostPresentHandoff = 1;
		/** <i>native declaration : headers\openvr_capi.h:1002</i> */
		public static final int EVRCompositorTimingMode_VRCompositorTimingMode_Explicit_ApplicationPerformsPostPresentHandoff = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1008</i><br>
	 * enum values
	 */
	public static interface VROverlayInputMethod {
		/** <i>native declaration : headers\openvr_capi.h:1005</i> */
		public static final int VROverlayInputMethod_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:1006</i> */
		public static final int VROverlayInputMethod_Mouse = 1;
		/** <i>native declaration : headers\openvr_capi.h:1007</i> */
		public static final int VROverlayInputMethod_DualAnalog = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1014</i><br>
	 * enum values
	 */
	public static interface VROverlayTransformType {
		/** <i>native declaration : headers\openvr_capi.h:1010</i> */
		public static final int VROverlayTransformType_VROverlayTransform_Absolute = 0;
		/** <i>native declaration : headers\openvr_capi.h:1011</i> */
		public static final int VROverlayTransformType_VROverlayTransform_TrackedDeviceRelative = 1;
		/** <i>native declaration : headers\openvr_capi.h:1012</i> */
		public static final int VROverlayTransformType_VROverlayTransform_SystemOverlay = 2;
		/** <i>native declaration : headers\openvr_capi.h:1013</i> */
		public static final int VROverlayTransformType_VROverlayTransform_TrackedComponent = 3;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1032</i><br>
	 * enum values
	 */
	public static interface VROverlayFlags {
		/** <i>native declaration : headers\openvr_capi.h:1016</i> */
		public static final int VROverlayFlags_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:1017</i> */
		public static final int VROverlayFlags_Curved = 1;
		/** <i>native declaration : headers\openvr_capi.h:1018</i> */
		public static final int VROverlayFlags_RGSS4X = 2;
		/** <i>native declaration : headers\openvr_capi.h:1019</i> */
		public static final int VROverlayFlags_NoDashboardTab = 3;
		/** <i>native declaration : headers\openvr_capi.h:1020</i> */
		public static final int VROverlayFlags_AcceptsGamepadEvents = 4;
		/** <i>native declaration : headers\openvr_capi.h:1021</i> */
		public static final int VROverlayFlags_ShowGamepadFocus = 5;
		/** <i>native declaration : headers\openvr_capi.h:1022</i> */
		public static final int VROverlayFlags_SendVRScrollEvents = 6;
		/** <i>native declaration : headers\openvr_capi.h:1023</i> */
		public static final int VROverlayFlags_SendVRTouchpadEvents = 7;
		/** <i>native declaration : headers\openvr_capi.h:1024</i> */
		public static final int VROverlayFlags_ShowTouchPadScrollWheel = 8;
		/** <i>native declaration : headers\openvr_capi.h:1025</i> */
		public static final int VROverlayFlags_TransferOwnershipToInternalProcess = 9;
		/** <i>native declaration : headers\openvr_capi.h:1026</i> */
		public static final int VROverlayFlags_SideBySide_Parallel = 10;
		/** <i>native declaration : headers\openvr_capi.h:1027</i> */
		public static final int VROverlayFlags_SideBySide_Crossed = 11;
		/** <i>native declaration : headers\openvr_capi.h:1028</i> */
		public static final int VROverlayFlags_Panorama = 12;
		/** <i>native declaration : headers\openvr_capi.h:1029</i> */
		public static final int VROverlayFlags_StereoPanorama = 13;
		/** <i>native declaration : headers\openvr_capi.h:1030</i> */
		public static final int VROverlayFlags_SortWithNonSceneOverlays = 14;
		/** <i>native declaration : headers\openvr_capi.h:1031</i> */
		public static final int VROverlayFlags_VisibleInDashboard = 15;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1041</i><br>
	 * enum values
	 */
	public static interface VRMessageOverlayResponse {
		/** <i>native declaration : headers\openvr_capi.h:1034</i> */
		public static final int VRMessageOverlayResponse_ButtonPress_0 = 0;
		/** <i>native declaration : headers\openvr_capi.h:1035</i> */
		public static final int VRMessageOverlayResponse_ButtonPress_1 = 1;
		/** <i>native declaration : headers\openvr_capi.h:1036</i> */
		public static final int VRMessageOverlayResponse_ButtonPress_2 = 2;
		/** <i>native declaration : headers\openvr_capi.h:1037</i> */
		public static final int VRMessageOverlayResponse_ButtonPress_3 = 3;
		/** <i>native declaration : headers\openvr_capi.h:1038</i> */
		public static final int VRMessageOverlayResponse_CouldntFindSystemOverlay = 4;
		/** <i>native declaration : headers\openvr_capi.h:1039</i> */
		public static final int VRMessageOverlayResponse_CouldntFindOrCreateClientOverlay = 5;
		/** <i>native declaration : headers\openvr_capi.h:1040</i> */
		public static final int VRMessageOverlayResponse_ApplicationQuit = 6;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1046</i><br>
	 * enum values
	 */
	public static interface EGamepadTextInputMode {
		/** <i>native declaration : headers\openvr_capi.h:1043</i> */
		public static final int EGamepadTextInputMode_k_EGamepadTextInputModeNormal = 0;
		/** <i>native declaration : headers\openvr_capi.h:1044</i> */
		public static final int EGamepadTextInputMode_k_EGamepadTextInputModePassword = 1;
		/** <i>native declaration : headers\openvr_capi.h:1045</i> */
		public static final int EGamepadTextInputMode_k_EGamepadTextInputModeSubmit = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1050</i><br>
	 * enum values
	 */
	public static interface EGamepadTextInputLineMode {
		/** <i>native declaration : headers\openvr_capi.h:1048</i> */
		public static final int EGamepadTextInputLineMode_k_EGamepadTextInputLineModeSingleLine = 0;
		/** <i>native declaration : headers\openvr_capi.h:1049</i> */
		public static final int EGamepadTextInputLineMode_k_EGamepadTextInputLineModeMultipleLines = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1057</i><br>
	 * enum values
	 */
	public static interface EOverlayDirection {
		/** <i>native declaration : headers\openvr_capi.h:1052</i> */
		public static final int EOverlayDirection_OverlayDirection_Up = 0;
		/** <i>native declaration : headers\openvr_capi.h:1053</i> */
		public static final int EOverlayDirection_OverlayDirection_Down = 1;
		/** <i>native declaration : headers\openvr_capi.h:1054</i> */
		public static final int EOverlayDirection_OverlayDirection_Left = 2;
		/** <i>native declaration : headers\openvr_capi.h:1055</i> */
		public static final int EOverlayDirection_OverlayDirection_Right = 3;
		/** <i>native declaration : headers\openvr_capi.h:1056</i> */
		public static final int EOverlayDirection_OverlayDirection_Count = 4;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1061</i><br>
	 * enum values
	 */
	public static interface EVROverlayIntersectionMaskPrimitiveType {
		/** <i>native declaration : headers\openvr_capi.h:1059</i> */
		public static final int EVROverlayIntersectionMaskPrimitiveType_OverlayIntersectionPrimitiveType_Rectangle = 0;
		/** <i>native declaration : headers\openvr_capi.h:1060</i> */
		public static final int EVROverlayIntersectionMaskPrimitiveType_OverlayIntersectionPrimitiveType_Circle = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1076</i><br>
	 * enum values
	 */
	public static interface EVRRenderModelError {
		/** <i>native declaration : headers\openvr_capi.h:1063</i> */
		public static final int EVRRenderModelError_VRRenderModelError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:1064</i> */
		public static final int EVRRenderModelError_VRRenderModelError_Loading = 100;
		/** <i>native declaration : headers\openvr_capi.h:1065</i> */
		public static final int EVRRenderModelError_VRRenderModelError_NotSupported = 200;
		/** <i>native declaration : headers\openvr_capi.h:1066</i> */
		public static final int EVRRenderModelError_VRRenderModelError_InvalidArg = 300;
		/** <i>native declaration : headers\openvr_capi.h:1067</i> */
		public static final int EVRRenderModelError_VRRenderModelError_InvalidModel = 301;
		/** <i>native declaration : headers\openvr_capi.h:1068</i> */
		public static final int EVRRenderModelError_VRRenderModelError_NoShapes = 302;
		/** <i>native declaration : headers\openvr_capi.h:1069</i> */
		public static final int EVRRenderModelError_VRRenderModelError_MultipleShapes = 303;
		/** <i>native declaration : headers\openvr_capi.h:1070</i> */
		public static final int EVRRenderModelError_VRRenderModelError_TooManyVertices = 304;
		/** <i>native declaration : headers\openvr_capi.h:1071</i> */
		public static final int EVRRenderModelError_VRRenderModelError_MultipleTextures = 305;
		/** <i>native declaration : headers\openvr_capi.h:1072</i> */
		public static final int EVRRenderModelError_VRRenderModelError_BufferTooSmall = 306;
		/** <i>native declaration : headers\openvr_capi.h:1073</i> */
		public static final int EVRRenderModelError_VRRenderModelError_NotEnoughNormals = 307;
		/** <i>native declaration : headers\openvr_capi.h:1074</i> */
		public static final int EVRRenderModelError_VRRenderModelError_NotEnoughTexCoords = 308;
		/** <i>native declaration : headers\openvr_capi.h:1075</i> */
		public static final int EVRRenderModelError_VRRenderModelError_InvalidTexture = 400;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1083</i><br>
	 * enum values
	 */
	public static interface EVRComponentProperty {
		/** <i>native declaration : headers\openvr_capi.h:1078</i> */
		public static final int EVRComponentProperty_VRComponentProperty_IsStatic = 1;
		/** <i>native declaration : headers\openvr_capi.h:1079</i> */
		public static final int EVRComponentProperty_VRComponentProperty_IsVisible = 2;
		/** <i>native declaration : headers\openvr_capi.h:1080</i> */
		public static final int EVRComponentProperty_VRComponentProperty_IsTouched = 4;
		/** <i>native declaration : headers\openvr_capi.h:1081</i> */
		public static final int EVRComponentProperty_VRComponentProperty_IsPressed = 8;
		/** <i>native declaration : headers\openvr_capi.h:1082</i> */
		public static final int EVRComponentProperty_VRComponentProperty_IsScrolled = 16;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1088</i><br>
	 * enum values
	 */
	public static interface EVRNotificationType {
		/** <i>native declaration : headers\openvr_capi.h:1085</i> */
		public static final int EVRNotificationType_Transient = 0;
		/** <i>native declaration : headers\openvr_capi.h:1086</i> */
		public static final int EVRNotificationType_Persistent = 1;
		/** <i>native declaration : headers\openvr_capi.h:1087</i> */
		public static final int EVRNotificationType_Transient_SystemWithUserValue = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1095</i><br>
	 * enum values
	 */
	public static interface EVRNotificationStyle {
		/** <i>native declaration : headers\openvr_capi.h:1090</i> */
		public static final int EVRNotificationStyle_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:1091</i> */
		public static final int EVRNotificationStyle_Application = 100;
		/** <i>native declaration : headers\openvr_capi.h:1092</i> */
		public static final int EVRNotificationStyle_Contact_Disabled = 200;
		/** <i>native declaration : headers\openvr_capi.h:1093</i> */
		public static final int EVRNotificationStyle_Contact_Enabled = 201;
		/** <i>native declaration : headers\openvr_capi.h:1094</i> */
		public static final int EVRNotificationStyle_Contact_Active = 202;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1103</i><br>
	 * enum values
	 */
	public static interface EVRSettingsError {
		/** <i>native declaration : headers\openvr_capi.h:1097</i> */
		public static final int EVRSettingsError_VRSettingsError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:1098</i> */
		public static final int EVRSettingsError_VRSettingsError_IPCFailed = 1;
		/** <i>native declaration : headers\openvr_capi.h:1099</i> */
		public static final int EVRSettingsError_VRSettingsError_WriteFailed = 2;
		/** <i>native declaration : headers\openvr_capi.h:1100</i> */
		public static final int EVRSettingsError_VRSettingsError_ReadFailed = 3;
		/** <i>native declaration : headers\openvr_capi.h:1101</i> */
		public static final int EVRSettingsError_VRSettingsError_JsonParseFailed = 4;
		/** <i>native declaration : headers\openvr_capi.h:1102</i> */
		public static final int EVRSettingsError_VRSettingsError_UnsetSettingHasNoDefault = 5;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1111</i><br>
	 * enum values
	 */
	public static interface EVRScreenshotError {
		/** <i>native declaration : headers\openvr_capi.h:1105</i> */
		public static final int EVRScreenshotError_VRScreenshotError_None = 0;
		/** <i>native declaration : headers\openvr_capi.h:1106</i> */
		public static final int EVRScreenshotError_VRScreenshotError_RequestFailed = 1;
		/** <i>native declaration : headers\openvr_capi.h:1107</i> */
		public static final int EVRScreenshotError_VRScreenshotError_IncompatibleVersion = 100;
		/** <i>native declaration : headers\openvr_capi.h:1108</i> */
		public static final int EVRScreenshotError_VRScreenshotError_NotFound = 101;
		/** <i>native declaration : headers\openvr_capi.h:1109</i> */
		public static final int EVRScreenshotError_VRScreenshotError_BufferTooSmall = 102;
		/** <i>native declaration : headers\openvr_capi.h:1110</i> */
		public static final int EVRScreenshotError_VRScreenshotError_ScreenshotAlreadyInProgress = 108;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1116</i><br>
	 * enum values
	 */
	public static interface EVRSkeletalTransformSpace {
		/** <i>native declaration : headers\openvr_capi.h:1113</i> */
		public static final int EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Model = 0;
		/** <i>native declaration : headers\openvr_capi.h:1114</i> */
		public static final int EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Parent = 1;
		/** <i>native declaration : headers\openvr_capi.h:1115</i> */
		public static final int EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Additive = 2;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1120</i><br>
	 * enum values
	 */
	public static interface EVRInputFilterCancelType {
		/** <i>native declaration : headers\openvr_capi.h:1118</i> */
		public static final int EVRInputFilterCancelType_VRInputFilterCancel_Timers = 0;
		/** <i>native declaration : headers\openvr_capi.h:1119</i> */
		public static final int EVRInputFilterCancelType_VRInputFilterCancel_Momentum = 1;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1129</i><br>
	 * enum values
	 */
	public static interface EIOBufferError {
		/** <i>native declaration : headers\openvr_capi.h:1122</i> */
		public static final int EIOBufferError_IOBuffer_Success = 0;
		/** <i>native declaration : headers\openvr_capi.h:1123</i> */
		public static final int EIOBufferError_IOBuffer_OperationFailed = 100;
		/** <i>native declaration : headers\openvr_capi.h:1124</i> */
		public static final int EIOBufferError_IOBuffer_InvalidHandle = 101;
		/** <i>native declaration : headers\openvr_capi.h:1125</i> */
		public static final int EIOBufferError_IOBuffer_InvalidArgument = 102;
		/** <i>native declaration : headers\openvr_capi.h:1126</i> */
		public static final int EIOBufferError_IOBuffer_PathExists = 103;
		/** <i>native declaration : headers\openvr_capi.h:1127</i> */
		public static final int EIOBufferError_IOBuffer_PathDoesNotExist = 104;
		/** <i>native declaration : headers\openvr_capi.h:1128</i> */
		public static final int EIOBufferError_IOBuffer_Permission = 105;
	};
	/**
	 * <i>native declaration : headers\openvr_capi.h:1134</i><br>
	 * enum values
	 */
	public static interface EIOBufferMode {
		/** <i>native declaration : headers\openvr_capi.h:1131</i> */
		public static final int EIOBufferMode_IOBufferMode_Read = 1;
		/** <i>native declaration : headers\openvr_capi.h:1132</i> */
		public static final int EIOBufferMode_IOBufferMode_Write = 2;
		/** <i>native declaration : headers\openvr_capi.h:1133</i> */
		public static final int EIOBufferMode_IOBufferMode_Create = 512;
	};
	/** OpenVR Constants */
	public static final long k_nDriverNone = 4294967295L;
	public static final int k_unMaxDriverDebugResponseSize = 32768;
	public static final int k_unTrackedDeviceIndex_Hmd = 0;
	public static final int k_unMaxTrackedDeviceCount = 64;
	public static final int k_unTrackedDeviceIndexOther = -2;
	public static final long k_unTrackedDeviceIndexInvalid = 4294967295L;
	public static final long k_ulInvalidPropertyContainer = 0;
	public static final int k_unInvalidPropertyTag = 0;
	public static final long k_ulInvalidDriverHandle = 0;
	public static final int k_unFloatPropertyTag = 1;
	public static final int k_unInt32PropertyTag = 2;
	public static final int k_unUint64PropertyTag = 3;
	public static final int k_unBoolPropertyTag = 4;
	public static final int k_unStringPropertyTag = 5;
	public static final int k_unHmdMatrix34PropertyTag = 20;
	public static final int k_unHmdMatrix44PropertyTag = 21;
	public static final int k_unHmdVector3PropertyTag = 22;
	public static final int k_unHmdVector4PropertyTag = 23;
	public static final int k_unHiddenAreaPropertyTag = 30;
	public static final int k_unPathHandleInfoTag = 31;
	public static final int k_unActionPropertyTag = 32;
	public static final int k_unInputValuePropertyTag = 33;
	public static final int k_unWildcardPropertyTag = 34;
	public static final int k_unHapticVibrationPropertyTag = 35;
	public static final int k_unSkeletonPropertyTag = 36;
	public static final int k_unSpatialAnchorPosePropertyTag = 40;
	public static final int k_unOpenVRInternalReserved_Start = 1000;
	public static final int k_unOpenVRInternalReserved_End = 10000;
	public static final int k_unMaxPropertyStringSize = 32768;
	public static final long k_ulInvalidActionHandle = 0;
	public static final long k_ulInvalidActionSetHandle = 0;
	public static final long k_ulInvalidInputValueHandle = 0;
	public static final int k_unControllerStateAxisCount = 5;
	public static final long k_ulOverlayHandleInvalid = 0;
	public static final int k_unScreenshotHandleInvalid = 0;
	public static final int k_unMaxApplicationKeyLength = 128;
	public static final int k_unVROverlayMaxKeyLength = 128;
	public static final int k_unVROverlayMaxNameLength = 128;
	public static final int k_unMaxOverlayCount = 64;
	public static final int k_unMaxOverlayIntersectionMaskPrimitivesCount = 32;
	public static final int k_unNotificationTextMaxSize = 256;
	public static final int k_unMaxSettingsKeyLength = 128;
	public static final int k_unMaxActionNameLength = 64;
	public static final int k_unMaxActionSetNameLength = 64;
	public static final int k_unMaxActionOriginCount = 16;
	public static final long k_ulInvalidIOBufferHandle = 0;
	public static final int k_ulInvalidSpatialAnchorHandle = 0;
    
    
    public static final String IVRSystem_Version = "IVRSystem_019";
    public static final String IVRExtendedDisplay_Version = "IVRExtendedDisplay_001";
    public static final String IVRTrackedCamera_Version = "IVRTrackedCamera_003";
    public static final String k_pch_MimeType_HomeApp = "vr/home";
    public static final String k_pch_MimeType_GameTheater = "vr/game_theater";
    public static final String IVRApplications_Version = "IVRApplications_006";
    public static final String IVRChaperone_Version = "IVRChaperone_003";
    public static final String IVRChaperoneSetup_Version = "IVRChaperoneSetup_005";
    public static final String IVRCompositor_Version = "IVRCompositor_022";
    public static final String IVROverlay_Version = "IVROverlay_018";
    public static final String k_pch_Controller_Component_GDC2015 = "gdc2015";
    public static final String k_pch_Controller_Component_Base = "base";
    public static final String k_pch_Controller_Component_Tip = "tip";
    public static final String k_pch_Controller_Component_HandGrip = "handgrip";
    public static final String k_pch_Controller_Component_Status = "status";
    public static final String IVRRenderModels_Version = "IVRRenderModels_006";
    public static final String IVRNotifications_Version = "IVRNotifications_002";
    public static final String IVRSettings_Version = "IVRSettings_002";
    public static final String k_pch_SteamVR_Section = "steamvr";
    public static final String k_pch_SteamVR_RequireHmd_String = "requireHmd";
    public static final String k_pch_SteamVR_ForcedDriverKey_String = "forcedDriver";
    public static final String k_pch_SteamVR_ForcedHmdKey_String = "forcedHmd";
    public static final String k_pch_SteamVR_DisplayDebug_Bool = "displayDebug";
    public static final String k_pch_SteamVR_DebugProcessPipe_String = "debugProcessPipe";
    public static final String k_pch_SteamVR_DisplayDebugX_Int32 = "displayDebugX";
    public static final String k_pch_SteamVR_DisplayDebugY_Int32 = "displayDebugY";
    public static final String k_pch_SteamVR_SendSystemButtonToAllApps_Bool = "sendSystemButtonToAllApps";
    public static final String k_pch_SteamVR_LogLevel_Int32 = "loglevel";
    public static final String k_pch_SteamVR_IPD_Float = "ipd";
    public static final String k_pch_SteamVR_Background_String = "background";
    public static final String k_pch_SteamVR_BackgroundUseDomeProjection_Bool = "backgroundUseDomeProjection";
    public static final String k_pch_SteamVR_BackgroundCameraHeight_Float = "backgroundCameraHeight";
    public static final String k_pch_SteamVR_BackgroundDomeRadius_Float = "backgroundDomeRadius";
    public static final String k_pch_SteamVR_GridColor_String = "gridColor";
    public static final String k_pch_SteamVR_PlayAreaColor_String = "playAreaColor";
    public static final String k_pch_SteamVR_ShowStage_Bool = "showStage";
    public static final String k_pch_SteamVR_ActivateMultipleDrivers_Bool = "activateMultipleDrivers";
    public static final String k_pch_SteamVR_DirectMode_Bool = "directMode";
    public static final String k_pch_SteamVR_DirectModeEdidVid_Int32 = "directModeEdidVid";
    public static final String k_pch_SteamVR_DirectModeEdidPid_Int32 = "directModeEdidPid";
    public static final String k_pch_SteamVR_UsingSpeakers_Bool = "usingSpeakers";
    public static final String k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float = "speakersForwardYawOffsetDegrees";
    public static final String k_pch_SteamVR_BaseStationPowerManagement_Bool = "basestationPowerManagement";
    public static final String k_pch_SteamVR_NeverKillProcesses_Bool = "neverKillProcesses";
    public static final String k_pch_SteamVR_SupersampleScale_Float = "supersampleScale";
    public static final String k_pch_SteamVR_AllowAsyncReprojection_Bool = "allowAsyncReprojection";
    public static final String k_pch_SteamVR_AllowReprojection_Bool = "allowInterleavedReprojection";
    public static final String k_pch_SteamVR_ForceReprojection_Bool = "forceReprojection";
    public static final String k_pch_SteamVR_ForceFadeOnBadTracking_Bool = "forceFadeOnBadTracking";
    public static final String k_pch_SteamVR_DefaultMirrorView_Int32 = "defaultMirrorView";
    public static final String k_pch_SteamVR_ShowMirrorView_Bool = "showMirrorView";
    public static final String k_pch_SteamVR_MirrorViewGeometry_String = "mirrorViewGeometry";
    public static final String k_pch_SteamVR_StartMonitorFromAppLaunch = "startMonitorFromAppLaunch";
    public static final String k_pch_SteamVR_StartCompositorFromAppLaunch_Bool = "startCompositorFromAppLaunch";
    public static final String k_pch_SteamVR_StartDashboardFromAppLaunch_Bool = "startDashboardFromAppLaunch";
    public static final String k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool = "startOverlayAppsFromDashboard";
    public static final String k_pch_SteamVR_EnableHomeApp = "enableHomeApp";
    public static final String k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 = "CycleBackgroundImageTimeSec";
    public static final String k_pch_SteamVR_RetailDemo_Bool = "retailDemo";
    public static final String k_pch_SteamVR_IpdOffset_Float = "ipdOffset";
    public static final String k_pch_SteamVR_AllowSupersampleFiltering_Bool = "allowSupersampleFiltering";
    public static final String k_pch_SteamVR_SupersampleManualOverride_Bool = "supersampleManualOverride";
    public static final String k_pch_SteamVR_EnableLinuxVulkanAsync_Bool = "enableLinuxVulkanAsync";
    public static final String k_pch_SteamVR_AllowDisplayLockedMode_Bool = "allowDisplayLockedMode";
    public static final String k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool = "haveStartedTutorialForNativeChaperoneDriver";
    public static final String k_pch_SteamVR_ForceWindows32bitVRMonitor = "forceWindows32BitVRMonitor";
    public static final String k_pch_SteamVR_DebugInput = "debugInput";
    public static final String k_pch_SteamVR_LegacyInputRebinding = "legacyInputRebinding";
    public static final String k_pch_SteamVR_DebugInputBinding = "debugInputBinding";
    public static final String k_pch_SteamVR_InputBindingUIBlock = "inputBindingUI";
    public static final String k_pch_SteamVR_RenderCameraMode = "renderCameraMode";
    public static final String k_pch_Lighthouse_Section = "driver_lighthouse";
    public static final String k_pch_Lighthouse_DisableIMU_Bool = "disableimu";
    public static final String k_pch_Lighthouse_DisableIMUExceptHMD_Bool = "disableimuexcepthmd";
    public static final String k_pch_Lighthouse_UseDisambiguation_String = "usedisambiguation";
    public static final String k_pch_Lighthouse_DisambiguationDebug_Int32 = "disambiguationdebug";
    public static final String k_pch_Lighthouse_PrimaryBasestation_Int32 = "primarybasestation";
    public static final String k_pch_Lighthouse_DBHistory_Bool = "dbhistory";
    public static final String k_pch_Lighthouse_EnableBluetooth_Bool = "enableBluetooth";
    public static final String k_pch_Lighthouse_PowerManagedBaseStations_String = "PowerManagedBaseStations";
    public static final String k_pch_Null_Section = "driver_null";
    public static final String k_pch_Null_SerialNumber_String = "serialNumber";
    public static final String k_pch_Null_ModelNumber_String = "modelNumber";
    public static final String k_pch_Null_WindowX_Int32 = "windowX";
    public static final String k_pch_Null_WindowY_Int32 = "windowY";
    public static final String k_pch_Null_WindowWidth_Int32 = "windowWidth";
    public static final String k_pch_Null_WindowHeight_Int32 = "windowHeight";
    public static final String k_pch_Null_RenderWidth_Int32 = "renderWidth";
    public static final String k_pch_Null_RenderHeight_Int32 = "renderHeight";
    public static final String k_pch_Null_SecondsFromVsyncToPhotons_Float = "secondsFromVsyncToPhotons";
    public static final String k_pch_Null_DisplayFrequency_Float = "displayFrequency";
    public static final String k_pch_UserInterface_Section = "userinterface";
    public static final String k_pch_UserInterface_StatusAlwaysOnTop_Bool = "StatusAlwaysOnTop";
    public static final String k_pch_UserInterface_MinimizeToTray_Bool = "MinimizeToTray";
    public static final String k_pch_UserInterface_Screenshots_Bool = "screenshots";
    public static final String k_pch_UserInterface_ScreenshotType_Int = "screenshotType";
    public static final String k_pch_Notifications_Section = "notifications";
    public static final String k_pch_Notifications_DoNotDisturb_Bool = "DoNotDisturb";
    public static final String k_pch_Keyboard_Section = "keyboard";
    public static final String k_pch_Keyboard_TutorialCompletions = "TutorialCompletions";
    public static final String k_pch_Keyboard_ScaleX = "ScaleX";
    public static final String k_pch_Keyboard_ScaleY = "ScaleY";
    public static final String k_pch_Keyboard_OffsetLeftX = "OffsetLeftX";
    public static final String k_pch_Keyboard_OffsetRightX = "OffsetRightX";
    public static final String k_pch_Keyboard_OffsetY = "OffsetY";
    public static final String k_pch_Keyboard_Smoothing = "Smoothing";
    public static final String k_pch_Perf_Section = "perfcheck";
    public static final String k_pch_Perf_HeuristicActive_Bool = "heuristicActive";
    public static final String k_pch_Perf_NotifyInHMD_Bool = "warnInHMD";
    public static final String k_pch_Perf_NotifyOnlyOnce_Bool = "warnOnlyOnce";
    public static final String k_pch_Perf_AllowTimingStore_Bool = "allowTimingStore";
    public static final String k_pch_Perf_SaveTimingsOnExit_Bool = "saveTimingsOnExit";
    public static final String k_pch_Perf_TestData_Float = "perfTestData";
    public static final String k_pch_Perf_LinuxGPUProfiling_Bool = "linuxGPUProfiling";
    public static final String k_pch_CollisionBounds_Section = "collisionBounds";
    public static final String k_pch_CollisionBounds_Style_Int32 = "CollisionBoundsStyle";
    public static final String k_pch_CollisionBounds_GroundPerimeterOn_Bool = "CollisionBoundsGroundPerimeterOn";
    public static final String k_pch_CollisionBounds_CenterMarkerOn_Bool = "CollisionBoundsCenterMarkerOn";
    public static final String k_pch_CollisionBounds_PlaySpaceOn_Bool = "CollisionBoundsPlaySpaceOn";
    public static final String k_pch_CollisionBounds_FadeDistance_Float = "CollisionBoundsFadeDistance";
    public static final String k_pch_CollisionBounds_ColorGammaR_Int32 = "CollisionBoundsColorGammaR";
    public static final String k_pch_CollisionBounds_ColorGammaG_Int32 = "CollisionBoundsColorGammaG";
    public static final String k_pch_CollisionBounds_ColorGammaB_Int32 = "CollisionBoundsColorGammaB";
    public static final String k_pch_CollisionBounds_ColorGammaA_Int32 = "CollisionBoundsColorGammaA";
    public static final String k_pch_Camera_Section = "camera";
    public static final String k_pch_Camera_EnableCamera_Bool = "enableCamera";
    public static final String k_pch_Camera_EnableCameraInDashboard_Bool = "enableCameraInDashboard";
    public static final String k_pch_Camera_EnableCameraForCollisionBounds_Bool = "enableCameraForCollisionBounds";
    public static final String k_pch_Camera_EnableCameraForRoomView_Bool = "enableCameraForRoomView";
    public static final String k_pch_Camera_BoundsColorGammaR_Int32 = "cameraBoundsColorGammaR";
    public static final String k_pch_Camera_BoundsColorGammaG_Int32 = "cameraBoundsColorGammaG";
    public static final String k_pch_Camera_BoundsColorGammaB_Int32 = "cameraBoundsColorGammaB";
    public static final String k_pch_Camera_BoundsColorGammaA_Int32 = "cameraBoundsColorGammaA";
    public static final String k_pch_Camera_BoundsStrength_Int32 = "cameraBoundsStrength";
    public static final String k_pch_Camera_RoomViewMode_Int32 = "cameraRoomViewMode";
    public static final String k_pch_audio_Section = "audio";
    public static final String k_pch_audio_OnPlaybackDevice_String = "onPlaybackDevice";
    public static final String k_pch_audio_OnRecordDevice_String = "onRecordDevice";
    public static final String k_pch_audio_OnPlaybackMirrorDevice_String = "onPlaybackMirrorDevice";
    public static final String k_pch_audio_OffPlaybackDevice_String = "offPlaybackDevice";
    public static final String k_pch_audio_OffRecordDevice_String = "offRecordDevice";
    public static final String k_pch_audio_VIVEHDMIGain = "viveHDMIGain";
    public static final String k_pch_Power_Section = "power";
    public static final String k_pch_Power_PowerOffOnExit_Bool = "powerOffOnExit";
    public static final String k_pch_Power_TurnOffScreensTimeout_Float = "turnOffScreensTimeout";
    public static final String k_pch_Power_TurnOffControllersTimeout_Float = "turnOffControllersTimeout";
    public static final String k_pch_Power_ReturnToWatchdogTimeout_Float = "returnToWatchdogTimeout";
    public static final String k_pch_Power_AutoLaunchSteamVROnButtonPress = "autoLaunchSteamVROnButtonPress";
    public static final String k_pch_Power_PauseCompositorOnStandby_Bool = "pauseCompositorOnStandby";
    public static final String k_pch_Dashboard_Section = "dashboard";
    public static final String k_pch_Dashboard_EnableDashboard_Bool = "enableDashboard";
    public static final String k_pch_Dashboard_ArcadeMode_Bool = "arcadeMode";
    public static final String k_pch_Dashboard_EnableWebUI = "webUI";
    public static final String k_pch_Dashboard_EnableWebUIDevTools = "webUIDevTools";
    public static final String k_pch_Dashboard_EnableWebUIDashboardReplacement = "webUIDashboard";
    public static final String k_pch_modelskin_Section = "modelskins";
    public static final String k_pch_Driver_Enable_Bool = "enable";
    public static final String k_pch_WebInterface_Section = "WebInterface";
    public static final String k_pch_WebInterface_WebEnable_Bool = "WebEnable";
    public static final String k_pch_WebInterface_WebPort_String = "WebPort";
    public static final String k_pch_TrackingOverride_Section = "TrackingOverrides";
    public static final String k_pch_App_BindingAutosaveURLSuffix_String = "AutosaveURL";
    public static final String k_pch_App_BindingCurrentURLSuffix_String = "CurrentURL";
    public static final String k_pch_App_NeedToUpdateAutosaveSuffix_Bool = "NeedToUpdateAutosave";
    public static final String k_pch_App_ActionManifestURL_String = "ActionManifestURL";
    public static final String k_pch_Trackers_Section = "trackers";
    public static final String IVRScreenshots_Version = "IVRScreenshots_001";
    public static final String IVRResources_Version = "IVRResources_001";
    public static final String IVRDriverManager_Version = "IVRDriverManager_001";
    public static final String IVRInput_Version = "IVRInput_004";
    public static final String IVRIOBuffer_Version = "IVRIOBuffer_001";
    public static final String IVRSpatialAnchors_Version = "IVRSpatialAnchors_001";
 
    
	/**
	 * Global entry points<br>
	 * Original signature : <code>intptr_t VR_InitInternal(EVRInitError*, EVRApplicationType)</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2378</i><br>
	 * @deprecated use the safer methods {@link #VR_InitInternal(java.nio.IntBuffer, int)} and {@link #VR_InitInternal(com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	public static native IntByReference VR_InitInternal(IntByReference peError, int eType);
	/**
	 * Global entry points<br>
	 * Original signature : <code>intptr_t VR_InitInternal(EVRInitError*, EVRApplicationType)</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2378</i>
	 */
	public static native IntByReference VR_InitInternal(IntBuffer peError, int eType);
	/**
	 * Original signature : <code>void VR_ShutdownInternal()</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2380</i>
	 */
	public static native void VR_ShutdownInternal();
	/**
	 * Original signature : <code>bool VR_IsHmdPresent()</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2382</i>
	 */
	public static native byte VR_IsHmdPresent();
	/**
	 * Original signature : <code>intptr_t VR_GetGenericInterface(const char*, EVRInitError*)</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2384</i><br>
	 * @deprecated use the safer method
         * {@link #VR_GetGenericInterface(java.lang.String, com.sun.jna.ptr.IntByReference)}
         * instead
	 */
	@Deprecated 
	public static native IntByReference VR_GetGenericInterface(Pointer pchInterfaceVersion, IntByReference peError);
	/**
	 * Original signature : <code>intptr_t VR_GetGenericInterface(const char*, EVRInitError*)</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2384</i>
	 */
	public static native IntByReference VR_GetGenericInterface(String pchInterfaceVersion, IntByReference peError);
	/**
	 * Original signature : <code>bool VR_IsRuntimeInstalled()</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2386</i>
	 */
	public static native byte VR_IsRuntimeInstalled();
	/**
	 * Original signature : <code>char* VR_GetVRInitErrorAsSymbol(EVRInitError)</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2388</i>
	 */
	public static native Pointer VR_GetVRInitErrorAsSymbol(int error);
	/**
	 * Original signature : <code>char* VR_GetVRInitErrorAsEnglishDescription(EVRInitError)</code><br>
	 * <i>native declaration : headers\openvr_capi.h:2390</i>
	 */
	public static native Pointer VR_GetVRInitErrorAsEnglishDescription(int error);
	public static class VkQueue_T extends PointerType {
		public VkQueue_T(Pointer address) {
			super(address);
		}
		public VkQueue_T() {
			super();
		}
	};
	public static class VkPhysicalDevice_T extends PointerType {
		public VkPhysicalDevice_T(Pointer address) {
			super(address);
		}
		public VkPhysicalDevice_T() {
			super();
		}
	};
	public static class VkInstance_T extends PointerType {
		public VkInstance_T(Pointer address) {
			super(address);
		}
		public VkInstance_T() {
			super();
		}
	};
	public static class ID3D12CommandQueue extends PointerType {
		public ID3D12CommandQueue(Pointer address) {
			super(address);
		}
		public ID3D12CommandQueue() {
			super();
		}
	};
	public static class ID3D12Resource extends PointerType {
		public ID3D12Resource(Pointer address) {
			super(address);
		}
		public ID3D12Resource() {
			super();
		}
	};
	public static class VkDevice_T extends PointerType {
		public VkDevice_T(Pointer address) {
			super(address);
		}
		public VkDevice_T() {
			super();
		}
	};
}
