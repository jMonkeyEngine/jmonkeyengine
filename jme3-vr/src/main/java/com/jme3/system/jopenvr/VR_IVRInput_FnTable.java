package com.jme3.system.jopenvr;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : headers\openvr_capi.h:2351</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class VR_IVRInput_FnTable extends Structure {
	/** C type : SetActionManifestPath_callback* */
	public VR_IVRInput_FnTable.SetActionManifestPath_callback SetActionManifestPath;
	/** C type : GetActionSetHandle_callback* */
	public VR_IVRInput_FnTable.GetActionSetHandle_callback GetActionSetHandle;
	/** C type : GetActionHandle_callback* */
	public VR_IVRInput_FnTable.GetActionHandle_callback GetActionHandle;
	/** C type : GetInputSourceHandle_callback* */
	public VR_IVRInput_FnTable.GetInputSourceHandle_callback GetInputSourceHandle;
	/** C type : UpdateActionState_callback* */
	public VR_IVRInput_FnTable.UpdateActionState_callback UpdateActionState;
	/** C type : GetDigitalActionData_callback* */
	public VR_IVRInput_FnTable.GetDigitalActionData_callback GetDigitalActionData;
	/** C type : GetAnalogActionData_callback* */
	public VR_IVRInput_FnTable.GetAnalogActionData_callback GetAnalogActionData;
	/** C type : GetPoseActionData_callback* */
	public VR_IVRInput_FnTable.GetPoseActionData_callback GetPoseActionData;
	/** C type : GetSkeletalActionData_callback* */
	public VR_IVRInput_FnTable.GetSkeletalActionData_callback GetSkeletalActionData;
	/** C type : GetSkeletalBoneData_callback* */
	public VR_IVRInput_FnTable.GetSkeletalBoneData_callback GetSkeletalBoneData;
	/** C type : GetSkeletalBoneDataCompressed_callback* */
	public VR_IVRInput_FnTable.GetSkeletalBoneDataCompressed_callback GetSkeletalBoneDataCompressed;
	/** C type : DecompressSkeletalBoneData_callback* */
	public VR_IVRInput_FnTable.DecompressSkeletalBoneData_callback DecompressSkeletalBoneData;
	/** C type : TriggerHapticVibrationAction_callback* */
	public VR_IVRInput_FnTable.TriggerHapticVibrationAction_callback TriggerHapticVibrationAction;
	/** C type : GetActionOrigins_callback* */
	public VR_IVRInput_FnTable.GetActionOrigins_callback GetActionOrigins;
	/** C type : GetOriginLocalizedName_callback* */
	public VR_IVRInput_FnTable.GetOriginLocalizedName_callback GetOriginLocalizedName;
	/** C type : GetOriginTrackedDeviceInfo_callback* */
	public VR_IVRInput_FnTable.GetOriginTrackedDeviceInfo_callback GetOriginTrackedDeviceInfo;
	/** C type : ShowActionOrigins_callback* */
	public VR_IVRInput_FnTable.ShowActionOrigins_callback ShowActionOrigins;
	/** C type : ShowBindingsForActionSet_callback* */
	public VR_IVRInput_FnTable.ShowBindingsForActionSet_callback ShowBindingsForActionSet;
	/** <i>native declaration : headers\openvr_capi.h:2333</i> */
	public interface SetActionManifestPath_callback extends Callback {
		int apply(Pointer pchActionManifestPath);
	};
	/** <i>native declaration : headers\openvr_capi.h:2334</i> */
	public interface GetActionSetHandle_callback extends Callback {
		int apply(Pointer pchActionSetName, LongByReference pHandle);
	};
	/** <i>native declaration : headers\openvr_capi.h:2335</i> */
	public interface GetActionHandle_callback extends Callback {
		int apply(Pointer pchActionName, LongByReference pHandle);
	};
	/** <i>native declaration : headers\openvr_capi.h:2336</i> */
	public interface GetInputSourceHandle_callback extends Callback {
		int apply(Pointer pchInputSourcePath, LongByReference pHandle);
	};
	/** <i>native declaration : headers\openvr_capi.h:2337</i> */
	public interface UpdateActionState_callback extends Callback {
		int apply(VRActiveActionSet_t pSets, int unSizeOfVRSelectedActionSet_t, int unSetCount);
	};
	/** <i>native declaration : headers\openvr_capi.h:2338</i> */
	public interface GetDigitalActionData_callback extends Callback {
		int apply(long action, InputDigitalActionData_t pActionData, int unActionDataSize, long ulRestrictToDevice);
	};
	/** <i>native declaration : headers\openvr_capi.h:2339</i> */
	public interface GetAnalogActionData_callback extends Callback {
		int apply(long action, InputAnalogActionData_t pActionData, int unActionDataSize, long ulRestrictToDevice);
	};
	/** <i>native declaration : headers\openvr_capi.h:2340</i> */
	public interface GetPoseActionData_callback extends Callback {
		int apply(long action, int eOrigin, float fPredictedSecondsFromNow, InputPoseActionData_t pActionData, int unActionDataSize, long ulRestrictToDevice);
	};
	/** <i>native declaration : headers\openvr_capi.h:2341</i> */
	public interface GetSkeletalActionData_callback extends Callback {
		int apply(long action, InputSkeletalActionData_t pActionData, int unActionDataSize, long ulRestrictToDevice);
	};
	/** <i>native declaration : headers\openvr_capi.h:2342</i> */
	public interface GetSkeletalBoneData_callback extends Callback {
		int apply(long action, int eTransformSpace, int eMotionRange, VRBoneTransform_t pTransformArray, int unTransformArrayCount, long ulRestrictToDevice);
	};
	/** <i>native declaration : headers\openvr_capi.h:2343</i> */
	public interface GetSkeletalBoneDataCompressed_callback extends Callback {
		int apply(long action, int eTransformSpace, int eMotionRange, Pointer pvCompressedData, int unCompressedSize, IntByReference punRequiredCompressedSize, long ulRestrictToDevice);
	};
	/** <i>native declaration : headers\openvr_capi.h:2344</i> */
	public interface DecompressSkeletalBoneData_callback extends Callback {
		int apply(Pointer pvCompressedBuffer, int unCompressedBufferSize, IntByReference peTransformSpace, VRBoneTransform_t pTransformArray, int unTransformArrayCount);
	};
	/** <i>native declaration : headers\openvr_capi.h:2345</i> */
	public interface TriggerHapticVibrationAction_callback extends Callback {
		int apply(long action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, long ulRestrictToDevice);
	};
	/** <i>native declaration : headers\openvr_capi.h:2346</i> */
	public interface GetActionOrigins_callback extends Callback {
		int apply(long actionSetHandle, long digitalActionHandle, LongByReference originsOut, int originOutCount);
	};
	/** <i>native declaration : headers\openvr_capi.h:2347</i> */
	public interface GetOriginLocalizedName_callback extends Callback {
		int apply(long origin, Pointer pchNameArray, int unNameArraySize);
	};
	/** <i>native declaration : headers\openvr_capi.h:2348</i> */
	public interface GetOriginTrackedDeviceInfo_callback extends Callback {
		int apply(long origin, InputOriginInfo_t pOriginInfo, int unOriginInfoSize);
	};
	/** <i>native declaration : headers\openvr_capi.h:2349</i> */
	public interface ShowActionOrigins_callback extends Callback {
		int apply(long actionSetHandle, long ulActionHandle);
	};
	/** <i>native declaration : headers\openvr_capi.h:2350</i> */
	public interface ShowBindingsForActionSet_callback extends Callback {
		int apply(VRActiveActionSet_t pSets, int unSizeOfVRSelectedActionSet_t, int unSetCount, long originToHighlight);
	};
	public VR_IVRInput_FnTable() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("SetActionManifestPath", "GetActionSetHandle", "GetActionHandle", "GetInputSourceHandle", "UpdateActionState", "GetDigitalActionData", "GetAnalogActionData", "GetPoseActionData", "GetSkeletalActionData", "GetSkeletalBoneData", "GetSkeletalBoneDataCompressed", "DecompressSkeletalBoneData", "TriggerHapticVibrationAction", "GetActionOrigins", "GetOriginLocalizedName", "GetOriginTrackedDeviceInfo", "ShowActionOrigins", "ShowBindingsForActionSet");
	}
	public VR_IVRInput_FnTable(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends VR_IVRInput_FnTable implements Structure.ByReference {
		
	};
	public static class ByValue extends VR_IVRInput_FnTable implements Structure.ByValue {
		
	};
}
