ext.mainClassName = 'jme3test.TestChooser'

task run(dependsOn: 'build', type:JavaExec) {
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath

    if (System.properties['java.util.logging.config.file'] != null) {
        systemProperty "java.util.logging.config.file", System.properties['java.util.logging.config.file']
    }

    if( assertions  == "true" ){
        enableAssertions = true;
    }
}

dependencies {
    implementation project(':jme3-core')
    implementation project(':jme3-desktop')
    implementation project(':jme3-effects')
    implementation project(':jme3-jbullet')
    implementation project(':jme3-jogg')
    implementation project(':jme3-lwjgl')
//    implementation project(':jme3-lwjgl3')
    implementation project(':jme3-networking')
    implementation project(':jme3-niftygui')
    implementation project(':jme3-plugins')
    implementation project(':jme3-terrain')
    implementation project(':jme3-testdata')
}

jar.doFirst{
    manifest {
        attributes('Manifest-Version'       : '1.0',
//                'Created-By'             : vendor,
//                'Specification-Title'    : appName,
//                'Specification-Version'  : jmeVersion,
//                'Specification-Vendor'   : "jMonkeyEngine",
//                'Implementation-Title'   : appName,
//                'Implementation-Version' : version,
//                'Implementation-Vendor'  : vendor,
                'Main-Class'             : getProperty('mainClassName'),
                // Add dependencies to manifest, remove version
                'Class-Path'             : configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.collect {
                                                        'lib/' +
                                                        it.name +
                                                        (it.classifier != null ? '-' + it.classifier : '') +
                                                        '.' + it.extension }.join(' ')
        )
    }
}

task dist (dependsOn: ['build', ':jme3-android:jar', ':jme3-android-native:jar']) {
    doLast {
        // Copy all dependencies to ../dist/lib, remove versions from jar files
        configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from artifact.file
                into '../dist/lib'
                if(artifact.classifier != null){
                    rename { "${artifact.name}-${artifact.classifier}.${artifact.extension}" }
                } else{
                    rename { "${artifact.name}.${artifact.extension}" }
                }
            }
        }
        copy {
            from jar.archivePath
            into '../dist'
            rename { "jMonkeyEngine3.jar" }
        }

        // Copy android packages, remove version
        copy {
            from project(':jme3-android').jar.archivePath
            into '../dist/opt/android'
            rename {project(':jme3-android').name+".jar"}
        }
        copy {
            from project(':jme3-android-native').jar.archivePath
            into '../dist/opt/android'
            rename {project(':jme3-android-native').name+".jar"}
        }
    }
}
